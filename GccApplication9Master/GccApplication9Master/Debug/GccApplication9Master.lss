
GccApplication9Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  0000160c  000016a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000160c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000022b  0080013a  0080013a  000016da  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000016da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001738  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00001778  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b6c  00000000  00000000  000018c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009b0  00000000  00000000  0000342c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e9d  00000000  00000000  00003ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003c4  00000000  00000000  00004c7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000761  00000000  00000000  00005040  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000098d  00000000  00000000  000057a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  0000612e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 24 01 	jmp	0x248	; 0x248 <__ctors_end>
       4:	0c 94 c6 06 	jmp	0xd8c	; 0xd8c <__vector_1>
       8:	0c 94 24 07 	jmp	0xe48	; 0xe48 <__vector_2>
       c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      10:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      14:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      18:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      1c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      20:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      24:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      28:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      2c:	0c 94 3d 07 	jmp	0xe7a	; 0xe7a <__vector_11>
      30:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      34:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      38:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      3c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      40:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      44:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      48:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      4c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      50:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      54:	0c 94 0e 07 	jmp	0xe1c	; 0xe1c <__vector_21>
      58:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      5c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      60:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      64:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>

00000068 <CHARSET>:
      68:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
      78:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
      88:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
      98:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
      a8:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
      b8:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
      c8:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
      d8:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
      e8:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
      f8:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
     108:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     118:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     128:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
     138:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     148:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     158:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     168:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     178:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
     188:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
     198:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
     1a8:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     1b8:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     1c8:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
     1d8:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
     1e8:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     1f8:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     208:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     218:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     228:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     238:	00 00 41 36 08 00 10 08 08 10 08 00 00 00 00 00     ..A6............

00000248 <__ctors_end>:
     248:	11 24       	eor	r1, r1
     24a:	1f be       	out	0x3f, r1	; 63
     24c:	cf ef       	ldi	r28, 0xFF	; 255
     24e:	d8 e0       	ldi	r29, 0x08	; 8
     250:	de bf       	out	0x3e, r29	; 62
     252:	cd bf       	out	0x3d, r28	; 61

00000254 <__do_copy_data>:
     254:	11 e0       	ldi	r17, 0x01	; 1
     256:	a0 e0       	ldi	r26, 0x00	; 0
     258:	b1 e0       	ldi	r27, 0x01	; 1
     25a:	ec e0       	ldi	r30, 0x0C	; 12
     25c:	f6 e1       	ldi	r31, 0x16	; 22
     25e:	02 c0       	rjmp	.+4      	; 0x264 <__do_copy_data+0x10>
     260:	05 90       	lpm	r0, Z+
     262:	0d 92       	st	X+, r0
     264:	aa 33       	cpi	r26, 0x3A	; 58
     266:	b1 07       	cpc	r27, r17
     268:	d9 f7       	brne	.-10     	; 0x260 <__do_copy_data+0xc>

0000026a <__do_clear_bss>:
     26a:	23 e0       	ldi	r18, 0x03	; 3
     26c:	aa e3       	ldi	r26, 0x3A	; 58
     26e:	b1 e0       	ldi	r27, 0x01	; 1
     270:	01 c0       	rjmp	.+2      	; 0x274 <.do_clear_bss_start>

00000272 <.do_clear_bss_loop>:
     272:	1d 92       	st	X+, r1

00000274 <.do_clear_bss_start>:
     274:	a5 36       	cpi	r26, 0x65	; 101
     276:	b2 07       	cpc	r27, r18
     278:	e1 f7       	brne	.-8      	; 0x272 <.do_clear_bss_loop>
     27a:	0e 94 43 01 	call	0x286	; 0x286 <main>
     27e:	0c 94 04 0b 	jmp	0x1608	; 0x1608 <_exit>

00000282 <__bad_interrupt>:
     282:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000286 <main>:
#include "semaforo.h"


int main(void) {
	
	start();
     286:	0e 94 1d 06 	call	0xc3a	; 0xc3a <start>
	
	sei();
     28a:	78 94       	sei
	
	while (1) {
		
		if(tempo_ms%500==0){//A cada 0.5s atualiza a string e verifica o valor lido
     28c:	80 91 43 03 	lds	r24, 0x0343	; 0x800343 <tempo_ms>
     290:	90 91 44 03 	lds	r25, 0x0344	; 0x800344 <tempo_ms+0x1>
     294:	64 ef       	ldi	r22, 0xF4	; 244
     296:	71 e0       	ldi	r23, 0x01	; 1
     298:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <__divmodhi4>
     29c:	89 2b       	or	r24, r25
     29e:	39 f5       	brne	.+78     	; 0x2ee <main+0x68>
			if (luxRead>472){ //Caso em q Lux do ldr > 300
     2a0:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <luxRead>
     2a4:	90 91 42 03 	lds	r25, 0x0342	; 0x800342 <luxRead+0x1>
     2a8:	89 3d       	cpi	r24, 0xD9	; 217
     2aa:	21 e0       	ldi	r18, 0x01	; 1
     2ac:	92 07       	cpc	r25, r18
     2ae:	14 f0       	brlt	.+4      	; 0x2b4 <main+0x2e>
				OCR0A = 0 ;		//Desliga luz
     2b0:	17 bc       	out	0x27, r1	; 39
     2b2:	1b c0       	rjmp	.+54     	; 0x2ea <main+0x64>
			}
			else if (luxRead<473&& (PINB&(1<<PINB7)|| carFreq != 0)){ // caso lux do ldr <300 e pessoas ou carros
     2b4:	89 3d       	cpi	r24, 0xD9	; 217
     2b6:	21 e0       	ldi	r18, 0x01	; 1
     2b8:	92 07       	cpc	r25, r18
     2ba:	5c f4       	brge	.+22     	; 0x2d2 <main+0x4c>
     2bc:	1f 99       	sbic	0x03, 7	; 3
     2be:	06 c0       	rjmp	.+12     	; 0x2cc <main+0x46>
     2c0:	20 91 3e 03 	lds	r18, 0x033E	; 0x80033e <carFreq>
     2c4:	30 91 3f 03 	lds	r19, 0x033F	; 0x80033f <carFreq+0x1>
     2c8:	23 2b       	or	r18, r19
     2ca:	19 f0       	breq	.+6      	; 0x2d2 <main+0x4c>
				OCR0A = 255 ;		//Acende luz 100%
     2cc:	8f ef       	ldi	r24, 0xFF	; 255
     2ce:	87 bd       	out	0x27, r24	; 39
     2d0:	0c c0       	rjmp	.+24     	; 0x2ea <main+0x64>
			}
			else if (luxRead<473&& (!PINB&(1<<PINB7)|| carFreq == 0)){ // caso lux do ldr <300 sem pessoas ou carros
     2d2:	89 3d       	cpi	r24, 0xD9	; 217
     2d4:	91 40       	sbci	r25, 0x01	; 1
     2d6:	4c f4       	brge	.+18     	; 0x2ea <main+0x64>
     2d8:	83 b1       	in	r24, 0x03	; 3
     2da:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <carFreq>
     2de:	90 91 3f 03 	lds	r25, 0x033F	; 0x80033f <carFreq+0x1>
     2e2:	89 2b       	or	r24, r25
     2e4:	11 f4       	brne	.+4      	; 0x2ea <main+0x64>
				OCR0A = 77 ;	//Acende luz 30%
     2e6:	8d e4       	ldi	r24, 0x4D	; 77
     2e8:	87 bd       	out	0x27, r24	; 39
			}
			reloadDisplay();
     2ea:	0e 94 c2 05 	call	0xb84	; 0xb84 <reloadDisplay>
		}
		
		if(tempo_ms%985==0){//A cada 1s verifica quantos carros passaram //Por algum motivo pegar a "amostragem" de carros antes de 1segundo para prever o nmr de carros por minuto gera menos "variação"
     2ee:	80 91 43 03 	lds	r24, 0x0343	; 0x800343 <tempo_ms>
     2f2:	90 91 44 03 	lds	r25, 0x0344	; 0x800344 <tempo_ms+0x1>
     2f6:	69 ed       	ldi	r22, 0xD9	; 217
     2f8:	73 e0       	ldi	r23, 0x03	; 3
     2fa:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <__divmodhi4>
     2fe:	89 2b       	or	r24, r25
     300:	29 f6       	brne	.-118    	; 0x28c <main+0x6>
			carFreq = carCount*60 ; //Multiplica por 60 a quantidade de carros/s para "prever" carros/minuto
     302:	20 91 4f 03 	lds	r18, 0x034F	; 0x80034f <carCount>
     306:	30 91 50 03 	lds	r19, 0x0350	; 0x800350 <carCount+0x1>
     30a:	4c e3       	ldi	r20, 0x3C	; 60
     30c:	42 9f       	mul	r20, r18
     30e:	c0 01       	movw	r24, r0
     310:	43 9f       	mul	r20, r19
     312:	90 0d       	add	r25, r0
     314:	11 24       	eor	r1, r1
     316:	90 93 3f 03 	sts	0x033F, r25	; 0x80033f <carFreq+0x1>
     31a:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <carFreq>
			reloadDisplay();
     31e:	0e 94 c2 05 	call	0xb84	; 0xb84 <reloadDisplay>
			carCount = 0 ;
     322:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <carCount+0x1>
     326:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <carCount>
     32a:	b0 cf       	rjmp	.-160    	; 0x28c <main+0x6>

0000032c <write>:
		nokia_lcd.screen[i] = 0x00;
}

void nokia_lcd_power(uint8_t on)
{
	write_cmd(on ? 0x20 : 0x24);
     32c:	98 b1       	in	r25, 0x08	; 8
     32e:	9d 7f       	andi	r25, 0xFD	; 253
     330:	98 b9       	out	0x08, r25	; 8
     332:	66 23       	and	r22, r22
     334:	29 f0       	breq	.+10     	; 0x340 <write+0x14>
     336:	98 b1       	in	r25, 0x08	; 8
     338:	98 60       	ori	r25, 0x08	; 8
     33a:	98 b9       	out	0x08, r25	; 8
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	1f c0       	rjmp	.+62     	; 0x37e <write+0x52>
     340:	98 b1       	in	r25, 0x08	; 8
     342:	97 7f       	andi	r25, 0xF7	; 247
     344:	98 b9       	out	0x08, r25	; 8
     346:	fa cf       	rjmp	.-12     	; 0x33c <write+0x10>
     348:	47 e0       	ldi	r20, 0x07	; 7
     34a:	50 e0       	ldi	r21, 0x00	; 0
     34c:	49 1b       	sub	r20, r25
     34e:	51 09       	sbc	r21, r1
     350:	28 2f       	mov	r18, r24
     352:	30 e0       	ldi	r19, 0x00	; 0
     354:	02 c0       	rjmp	.+4      	; 0x35a <write+0x2e>
     356:	35 95       	asr	r19
     358:	27 95       	ror	r18
     35a:	4a 95       	dec	r20
     35c:	e2 f7       	brpl	.-8      	; 0x356 <write+0x2a>
     35e:	20 ff       	sbrs	r18, 0
     360:	04 c0       	rjmp	.+8      	; 0x36a <write+0x3e>
     362:	28 b1       	in	r18, 0x08	; 8
     364:	20 61       	ori	r18, 0x10	; 16
     366:	28 b9       	out	0x08, r18	; 8
     368:	03 c0       	rjmp	.+6      	; 0x370 <write+0x44>
     36a:	28 b1       	in	r18, 0x08	; 8
     36c:	2f 7e       	andi	r18, 0xEF	; 239
     36e:	28 b9       	out	0x08, r18	; 8
     370:	28 b1       	in	r18, 0x08	; 8
     372:	20 62       	ori	r18, 0x20	; 32
     374:	28 b9       	out	0x08, r18	; 8
     376:	28 b1       	in	r18, 0x08	; 8
     378:	2f 7d       	andi	r18, 0xDF	; 223
     37a:	28 b9       	out	0x08, r18	; 8
     37c:	9f 5f       	subi	r25, 0xFF	; 255
     37e:	98 30       	cpi	r25, 0x08	; 8
     380:	18 f3       	brcs	.-58     	; 0x348 <write+0x1c>
     382:	88 b1       	in	r24, 0x08	; 8
     384:	82 60       	ori	r24, 0x02	; 2
     386:	88 b9       	out	0x08, r24	; 8
     388:	08 95       	ret

0000038a <write_cmd>:
     38a:	60 e0       	ldi	r22, 0x00	; 0
     38c:	0e 94 96 01 	call	0x32c	; 0x32c <write>
     390:	08 95       	ret

00000392 <write_data>:
     392:	61 e0       	ldi	r22, 0x01	; 1
     394:	0e 94 96 01 	call	0x32c	; 0x32c <write>
     398:	08 95       	ret

0000039a <nokia_lcd_init>:
     39a:	cf 93       	push	r28
     39c:	df 93       	push	r29
     39e:	87 b1       	in	r24, 0x07	; 7
     3a0:	82 60       	ori	r24, 0x02	; 2
     3a2:	87 b9       	out	0x07, r24	; 7
     3a4:	87 b1       	in	r24, 0x07	; 7
     3a6:	84 60       	ori	r24, 0x04	; 4
     3a8:	87 b9       	out	0x07, r24	; 7
     3aa:	87 b1       	in	r24, 0x07	; 7
     3ac:	88 60       	ori	r24, 0x08	; 8
     3ae:	87 b9       	out	0x07, r24	; 7
     3b0:	87 b1       	in	r24, 0x07	; 7
     3b2:	80 61       	ori	r24, 0x10	; 16
     3b4:	87 b9       	out	0x07, r24	; 7
     3b6:	87 b1       	in	r24, 0x07	; 7
     3b8:	80 62       	ori	r24, 0x20	; 32
     3ba:	87 b9       	out	0x07, r24	; 7
     3bc:	88 b1       	in	r24, 0x08	; 8
     3be:	84 60       	ori	r24, 0x04	; 4
     3c0:	88 b9       	out	0x08, r24	; 8
     3c2:	88 b1       	in	r24, 0x08	; 8
     3c4:	82 60       	ori	r24, 0x02	; 2
     3c6:	88 b9       	out	0x08, r24	; 8
     3c8:	83 ec       	ldi	r24, 0xC3	; 195
     3ca:	99 e0       	ldi	r25, 0x09	; 9
     3cc:	01 97       	sbiw	r24, 0x01	; 1
     3ce:	f1 f7       	brne	.-4      	; 0x3cc <nokia_lcd_init+0x32>
     3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <nokia_lcd_init+0x38>
     3d2:	00 00       	nop
     3d4:	88 b1       	in	r24, 0x08	; 8
     3d6:	8b 7f       	andi	r24, 0xFB	; 251
     3d8:	88 b9       	out	0x08, r24	; 8
     3da:	8b e5       	ldi	r24, 0x5B	; 91
     3dc:	94 e4       	ldi	r25, 0x44	; 68
     3de:	01 97       	sbiw	r24, 0x01	; 1
     3e0:	f1 f7       	brne	.-4      	; 0x3de <nokia_lcd_init+0x44>
     3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <nokia_lcd_init+0x4a>
     3e4:	00 00       	nop
     3e6:	88 b1       	in	r24, 0x08	; 8
     3e8:	84 60       	ori	r24, 0x04	; 4
     3ea:	88 b9       	out	0x08, r24	; 8
     3ec:	88 b1       	in	r24, 0x08	; 8
     3ee:	8d 7f       	andi	r24, 0xFD	; 253
     3f0:	88 b9       	out	0x08, r24	; 8
     3f2:	81 e2       	ldi	r24, 0x21	; 33
     3f4:	0e 94 c5 01 	call	0x38a	; 0x38a <write_cmd>
     3f8:	83 e1       	ldi	r24, 0x13	; 19
     3fa:	0e 94 c5 01 	call	0x38a	; 0x38a <write_cmd>
     3fe:	86 e0       	ldi	r24, 0x06	; 6
     400:	0e 94 c5 01 	call	0x38a	; 0x38a <write_cmd>
     404:	82 ec       	ldi	r24, 0xC2	; 194
     406:	0e 94 c5 01 	call	0x38a	; 0x38a <write_cmd>
     40a:	80 e2       	ldi	r24, 0x20	; 32
     40c:	0e 94 c5 01 	call	0x38a	; 0x38a <write_cmd>
     410:	89 e0       	ldi	r24, 0x09	; 9
     412:	0e 94 c5 01 	call	0x38a	; 0x38a <write_cmd>
     416:	80 e8       	ldi	r24, 0x80	; 128
     418:	0e 94 c5 01 	call	0x38a	; 0x38a <write_cmd>
     41c:	80 e4       	ldi	r24, 0x40	; 64
     41e:	0e 94 c5 01 	call	0x38a	; 0x38a <write_cmd>
     422:	c0 e0       	ldi	r28, 0x00	; 0
     424:	d0 e0       	ldi	r29, 0x00	; 0
     426:	04 c0       	rjmp	.+8      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
     428:	80 e0       	ldi	r24, 0x00	; 0
     42a:	0e 94 c9 01 	call	0x392	; 0x392 <write_data>
     42e:	21 96       	adiw	r28, 0x01	; 1
     430:	c8 3f       	cpi	r28, 0xF8	; 248
     432:	91 e0       	ldi	r25, 0x01	; 1
     434:	d9 07       	cpc	r29, r25
     436:	c0 f3       	brcs	.-16     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
     438:	88 e0       	ldi	r24, 0x08	; 8
     43a:	0e 94 c5 01 	call	0x38a	; 0x38a <write_cmd>
     43e:	8c e0       	ldi	r24, 0x0C	; 12
     440:	0e 94 c5 01 	call	0x38a	; 0x38a <write_cmd>
     444:	df 91       	pop	r29
     446:	cf 91       	pop	r28
     448:	08 95       	ret

0000044a <nokia_lcd_clear>:
     44a:	80 e8       	ldi	r24, 0x80	; 128
     44c:	0e 94 c5 01 	call	0x38a	; 0x38a <write_cmd>
     450:	80 e4       	ldi	r24, 0x40	; 64
     452:	0e 94 c5 01 	call	0x38a	; 0x38a <write_cmd>
     456:	10 92 32 03 	sts	0x0332, r1	; 0x800332 <__data_end+0x1f8>
     45a:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <__data_end+0x1f9>
     45e:	80 e0       	ldi	r24, 0x00	; 0
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	05 c0       	rjmp	.+10     	; 0x46e <nokia_lcd_clear+0x24>
     464:	fc 01       	movw	r30, r24
     466:	e6 5c       	subi	r30, 0xC6	; 198
     468:	fe 4f       	sbci	r31, 0xFE	; 254
     46a:	10 82       	st	Z, r1
     46c:	01 96       	adiw	r24, 0x01	; 1
     46e:	88 3f       	cpi	r24, 0xF8	; 248
     470:	21 e0       	ldi	r18, 0x01	; 1
     472:	92 07       	cpc	r25, r18
     474:	b8 f3       	brcs	.-18     	; 0x464 <nokia_lcd_clear+0x1a>
     476:	08 95       	ret

00000478 <nokia_lcd_set_pixel>:
}

void nokia_lcd_set_pixel(uint8_t x, uint8_t y, uint8_t value)
{
	uint8_t *byte = &nokia_lcd.screen[y/8*84+x];
     478:	26 2f       	mov	r18, r22
     47a:	26 95       	lsr	r18
     47c:	26 95       	lsr	r18
     47e:	26 95       	lsr	r18
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	34 e5       	ldi	r19, 0x54	; 84
     484:	23 9f       	mul	r18, r19
     486:	80 0d       	add	r24, r0
     488:	91 1d       	adc	r25, r1
     48a:	11 24       	eor	r1, r1
	if (value)
     48c:	44 23       	and	r20, r20
     48e:	79 f0       	breq	.+30     	; 0x4ae <nokia_lcd_set_pixel+0x36>
		*byte |= (1 << (y % 8));
     490:	67 70       	andi	r22, 0x07	; 7
     492:	21 e0       	ldi	r18, 0x01	; 1
     494:	30 e0       	ldi	r19, 0x00	; 0
     496:	02 c0       	rjmp	.+4      	; 0x49c <nokia_lcd_set_pixel+0x24>
     498:	22 0f       	add	r18, r18
     49a:	33 1f       	adc	r19, r19
     49c:	6a 95       	dec	r22
     49e:	e2 f7       	brpl	.-8      	; 0x498 <nokia_lcd_set_pixel+0x20>
     4a0:	fc 01       	movw	r30, r24
     4a2:	e6 5c       	subi	r30, 0xC6	; 198
     4a4:	fe 4f       	sbci	r31, 0xFE	; 254
     4a6:	80 81       	ld	r24, Z
     4a8:	28 2b       	or	r18, r24
     4aa:	20 83       	st	Z, r18
     4ac:	08 95       	ret
	else
		*byte &= ~(1 << (y %8 ));
     4ae:	67 70       	andi	r22, 0x07	; 7
     4b0:	21 e0       	ldi	r18, 0x01	; 1
     4b2:	30 e0       	ldi	r19, 0x00	; 0
     4b4:	02 c0       	rjmp	.+4      	; 0x4ba <nokia_lcd_set_pixel+0x42>
     4b6:	22 0f       	add	r18, r18
     4b8:	33 1f       	adc	r19, r19
     4ba:	6a 95       	dec	r22
     4bc:	e2 f7       	brpl	.-8      	; 0x4b6 <nokia_lcd_set_pixel+0x3e>
     4be:	fc 01       	movw	r30, r24
     4c0:	e6 5c       	subi	r30, 0xC6	; 198
     4c2:	fe 4f       	sbci	r31, 0xFE	; 254
     4c4:	20 95       	com	r18
     4c6:	80 81       	ld	r24, Z
     4c8:	28 23       	and	r18, r24
     4ca:	20 83       	st	Z, r18
     4cc:	08 95       	ret

000004ce <nokia_lcd_write_char>:
}

void nokia_lcd_write_char(char code, uint8_t scale)
{
     4ce:	ef 92       	push	r14
     4d0:	ff 92       	push	r15
     4d2:	0f 93       	push	r16
     4d4:	1f 93       	push	r17
     4d6:	cf 93       	push	r28
     4d8:	df 93       	push	r29
     4da:	e8 2e       	mov	r14, r24
     4dc:	f6 2e       	mov	r15, r22
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
     4de:	00 e0       	ldi	r16, 0x00	; 0
     4e0:	45 c0       	rjmp	.+138    	; 0x56c <nokia_lcd_write_char+0x9e>
		for (y = 0; y < 7*scale; y++)
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
     4e2:	2e 2d       	mov	r18, r14
     4e4:	30 e0       	ldi	r19, 0x00	; 0
     4e6:	20 52       	subi	r18, 0x20	; 32
     4e8:	31 09       	sbc	r19, r1
     4ea:	80 2f       	mov	r24, r16
     4ec:	6f 2d       	mov	r22, r15
     4ee:	0e 94 e6 07 	call	0xfcc	; 0xfcc <__udivmodqi4>
     4f2:	f9 01       	movw	r30, r18
     4f4:	ee 0f       	add	r30, r30
     4f6:	ff 1f       	adc	r31, r31
     4f8:	ee 0f       	add	r30, r30
     4fa:	ff 1f       	adc	r31, r31
     4fc:	e2 0f       	add	r30, r18
     4fe:	f3 1f       	adc	r31, r19
     500:	e8 0f       	add	r30, r24
     502:	f1 1d       	adc	r31, r1
     504:	e8 59       	subi	r30, 0x98	; 152
     506:	ff 4f       	sbci	r31, 0xFF	; 255
     508:	e4 91       	lpm	r30, Z
     50a:	81 2f       	mov	r24, r17
     50c:	0e 94 e6 07 	call	0xfcc	; 0xfcc <__udivmodqi4>
     510:	f0 e0       	ldi	r31, 0x00	; 0
     512:	02 c0       	rjmp	.+4      	; 0x518 <nokia_lcd_write_char+0x4a>
     514:	f5 95       	asr	r31
     516:	e7 95       	ror	r30
     518:	8a 95       	dec	r24
     51a:	e2 f7       	brpl	.-8      	; 0x514 <nokia_lcd_write_char+0x46>
     51c:	e0 ff       	sbrs	r30, 0
     51e:	0a c0       	rjmp	.+20     	; 0x534 <nokia_lcd_write_char+0x66>
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
     520:	60 91 33 03 	lds	r22, 0x0333	; 0x800333 <__data_end+0x1f9>
     524:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <__data_end+0x1f8>
     528:	61 0f       	add	r22, r17
     52a:	41 e0       	ldi	r20, 0x01	; 1
     52c:	80 0f       	add	r24, r16
     52e:	0e 94 3c 02 	call	0x478	; 0x478 <nokia_lcd_set_pixel>
     532:	09 c0       	rjmp	.+18     	; 0x546 <nokia_lcd_write_char+0x78>
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);
     534:	60 91 33 03 	lds	r22, 0x0333	; 0x800333 <__data_end+0x1f9>
     538:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <__data_end+0x1f8>
     53c:	61 0f       	add	r22, r17
     53e:	40 e0       	ldi	r20, 0x00	; 0
     540:	80 0f       	add	r24, r16
     542:	0e 94 3c 02 	call	0x478	; 0x478 <nokia_lcd_set_pixel>
void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
		for (y = 0; y < 7*scale; y++)
     546:	1f 5f       	subi	r17, 0xFF	; 255
     548:	01 c0       	rjmp	.+2      	; 0x54c <nokia_lcd_write_char+0x7e>
     54a:	10 e0       	ldi	r17, 0x00	; 0
     54c:	21 2f       	mov	r18, r17
     54e:	30 e0       	ldi	r19, 0x00	; 0
     550:	ce 01       	movw	r24, r28
     552:	88 0f       	add	r24, r24
     554:	99 1f       	adc	r25, r25
     556:	88 0f       	add	r24, r24
     558:	99 1f       	adc	r25, r25
     55a:	88 0f       	add	r24, r24
     55c:	99 1f       	adc	r25, r25
     55e:	8c 1b       	sub	r24, r28
     560:	9d 0b       	sbc	r25, r29
     562:	28 17       	cp	r18, r24
     564:	39 07       	cpc	r19, r25
     566:	0c f4       	brge	.+2      	; 0x56a <nokia_lcd_write_char+0x9c>
     568:	bc cf       	rjmp	.-136    	; 0x4e2 <nokia_lcd_write_char+0x14>

void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
     56a:	0f 5f       	subi	r16, 0xFF	; 255
     56c:	20 2f       	mov	r18, r16
     56e:	30 e0       	ldi	r19, 0x00	; 0
     570:	cf 2d       	mov	r28, r15
     572:	d0 e0       	ldi	r29, 0x00	; 0
     574:	ce 01       	movw	r24, r28
     576:	88 0f       	add	r24, r24
     578:	99 1f       	adc	r25, r25
     57a:	88 0f       	add	r24, r24
     57c:	99 1f       	adc	r25, r25
     57e:	8c 0f       	add	r24, r28
     580:	9d 1f       	adc	r25, r29
     582:	28 17       	cp	r18, r24
     584:	39 07       	cpc	r19, r25
     586:	0c f3       	brlt	.-62     	; 0x54a <nokia_lcd_write_char+0x7c>
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);

	nokia_lcd.cursor_x += 5*scale + 1;
     588:	e2 e3       	ldi	r30, 0x32	; 50
     58a:	f3 e0       	ldi	r31, 0x03	; 3
     58c:	8f 2d       	mov	r24, r15
     58e:	88 0f       	add	r24, r24
     590:	88 0f       	add	r24, r24
     592:	8f 0d       	add	r24, r15
     594:	90 81       	ld	r25, Z
     596:	89 0f       	add	r24, r25
     598:	8f 5f       	subi	r24, 0xFF	; 255
     59a:	80 83       	st	Z, r24
	if (nokia_lcd.cursor_x >= 84) {
     59c:	84 35       	cpi	r24, 0x54	; 84
     59e:	70 f0       	brcs	.+28     	; 0x5bc <nokia_lcd_write_char+0xee>
		nokia_lcd.cursor_x = 0;
     5a0:	10 92 32 03 	sts	0x0332, r1	; 0x800332 <__data_end+0x1f8>
		nokia_lcd.cursor_y += 7*scale + 1;
     5a4:	e3 e3       	ldi	r30, 0x33	; 51
     5a6:	f3 e0       	ldi	r31, 0x03	; 3
     5a8:	8f 2d       	mov	r24, r15
     5aa:	88 0f       	add	r24, r24
     5ac:	88 0f       	add	r24, r24
     5ae:	88 0f       	add	r24, r24
     5b0:	98 2f       	mov	r25, r24
     5b2:	9f 19       	sub	r25, r15
     5b4:	80 81       	ld	r24, Z
     5b6:	89 0f       	add	r24, r25
     5b8:	8f 5f       	subi	r24, 0xFF	; 255
     5ba:	80 83       	st	Z, r24
	}
	if (nokia_lcd.cursor_y >= 48) {
     5bc:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <__data_end+0x1f9>
     5c0:	80 33       	cpi	r24, 0x30	; 48
     5c2:	20 f0       	brcs	.+8      	; 0x5cc <nokia_lcd_write_char+0xfe>
		nokia_lcd.cursor_x = 0;
     5c4:	10 92 32 03 	sts	0x0332, r1	; 0x800332 <__data_end+0x1f8>
		nokia_lcd.cursor_y = 0;
     5c8:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <__data_end+0x1f9>
	}
}
     5cc:	df 91       	pop	r29
     5ce:	cf 91       	pop	r28
     5d0:	1f 91       	pop	r17
     5d2:	0f 91       	pop	r16
     5d4:	ff 90       	pop	r15
     5d6:	ef 90       	pop	r14
     5d8:	08 95       	ret

000005da <nokia_lcd_write_string>:

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
     5da:	1f 93       	push	r17
     5dc:	cf 93       	push	r28
     5de:	df 93       	push	r29
     5e0:	ec 01       	movw	r28, r24
     5e2:	16 2f       	mov	r17, r22
	while(*str)
     5e4:	04 c0       	rjmp	.+8      	; 0x5ee <nokia_lcd_write_string+0x14>
		nokia_lcd_write_char(*str++, scale);
     5e6:	21 96       	adiw	r28, 0x01	; 1
     5e8:	61 2f       	mov	r22, r17
     5ea:	0e 94 67 02 	call	0x4ce	; 0x4ce <nokia_lcd_write_char>
	}
}

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
	while(*str)
     5ee:	88 81       	ld	r24, Y
     5f0:	81 11       	cpse	r24, r1
     5f2:	f9 cf       	rjmp	.-14     	; 0x5e6 <nokia_lcd_write_string+0xc>
		nokia_lcd_write_char(*str++, scale);
}
     5f4:	df 91       	pop	r29
     5f6:	cf 91       	pop	r28
     5f8:	1f 91       	pop	r17
     5fa:	08 95       	ret

000005fc <nokia_lcd_set_cursor>:

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
     5fc:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <__data_end+0x1f8>
	nokia_lcd.cursor_y = y;
     600:	60 93 33 03 	sts	0x0333, r22	; 0x800333 <__data_end+0x1f9>
     604:	08 95       	ret

00000606 <nokia_lcd_render>:
}

void nokia_lcd_render(void)
{
     606:	cf 93       	push	r28
     608:	df 93       	push	r29
	register unsigned i;
	/* Set column and row to 0 */
	write_cmd(0x80);
     60a:	80 e8       	ldi	r24, 0x80	; 128
     60c:	0e 94 c5 01 	call	0x38a	; 0x38a <write_cmd>
	write_cmd(0x40);
     610:	80 e4       	ldi	r24, 0x40	; 64
     612:	0e 94 c5 01 	call	0x38a	; 0x38a <write_cmd>

	/* Write screen to display */
	for (i = 0; i < 504; i++)
     616:	c0 e0       	ldi	r28, 0x00	; 0
     618:	d0 e0       	ldi	r29, 0x00	; 0
     61a:	07 c0       	rjmp	.+14     	; 0x62a <nokia_lcd_render+0x24>
		write_data(nokia_lcd.screen[i]);
     61c:	fe 01       	movw	r30, r28
     61e:	e6 5c       	subi	r30, 0xC6	; 198
     620:	fe 4f       	sbci	r31, 0xFE	; 254
     622:	80 81       	ld	r24, Z
     624:	0e 94 c9 01 	call	0x392	; 0x392 <write_data>
	/* Set column and row to 0 */
	write_cmd(0x80);
	write_cmd(0x40);

	/* Write screen to display */
	for (i = 0; i < 504; i++)
     628:	21 96       	adiw	r28, 0x01	; 1
     62a:	c8 3f       	cpi	r28, 0xF8	; 248
     62c:	81 e0       	ldi	r24, 0x01	; 1
     62e:	d8 07       	cpc	r29, r24
     630:	a8 f3       	brcs	.-22     	; 0x61c <nokia_lcd_render+0x16>
		write_data(nokia_lcd.screen[i]);
}
     632:	df 91       	pop	r29
     634:	cf 91       	pop	r28
     636:	08 95       	ret

00000638 <buttonGreen>:
	reloadDisplay();
}


void buttonGreen(){
	if ( PINB&(1<<PINB2) &&  countGreen < 9 && actualMode==MANUAL) {
     638:	1a 9b       	sbis	0x03, 2	; 3
     63a:	10 c0       	rjmp	.+32     	; 0x65c <buttonGreen+0x24>
     63c:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <countGreen>
     640:	90 91 35 03 	lds	r25, 0x0335	; 0x800335 <countGreen+0x1>
     644:	89 30       	cpi	r24, 0x09	; 9
     646:	91 05       	cpc	r25, r1
     648:	4c f4       	brge	.+18     	; 0x65c <buttonGreen+0x24>
     64a:	20 91 54 03 	lds	r18, 0x0354	; 0x800354 <actualMode>
     64e:	21 11       	cpse	r18, r1
     650:	05 c0       	rjmp	.+10     	; 0x65c <buttonGreen+0x24>
		countGreen = countGreen + 1 ;
     652:	01 96       	adiw	r24, 0x01	; 1
     654:	90 93 35 03 	sts	0x0335, r25	; 0x800335 <countGreen+0x1>
     658:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <countGreen>
	}										//Função para verificar quando algum botão é pressionado
	if ( PINB&(1<<PINB3) && countGreen > 1 && actualMode==MANUAL) {
     65c:	1b 9b       	sbis	0x03, 3	; 3
     65e:	10 c0       	rjmp	.+32     	; 0x680 <buttonGreen+0x48>
     660:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <countGreen>
     664:	90 91 35 03 	lds	r25, 0x0335	; 0x800335 <countGreen+0x1>
     668:	82 30       	cpi	r24, 0x02	; 2
     66a:	91 05       	cpc	r25, r1
     66c:	4c f0       	brlt	.+18     	; 0x680 <buttonGreen+0x48>
     66e:	20 91 54 03 	lds	r18, 0x0354	; 0x800354 <actualMode>
     672:	21 11       	cpse	r18, r1
     674:	05 c0       	rjmp	.+10     	; 0x680 <buttonGreen+0x48>
		countGreen = countGreen - 1 ;
     676:	01 97       	sbiw	r24, 0x01	; 1
     678:	90 93 35 03 	sts	0x0335, r25	; 0x800335 <countGreen+0x1>
     67c:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <countGreen>
     680:	08 95       	ret

00000682 <buttonYellow>:
	}
}

void buttonYellow(){
	if ( PINB&(1<<PINB2) &&  countYellow < 9 && actualMode==MANUAL) {
     682:	1a 9b       	sbis	0x03, 2	; 3
     684:	1d c0       	rjmp	.+58     	; 0x6c0 <buttonYellow+0x3e>
     686:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <countYellow>
     68a:	90 91 5f 03 	lds	r25, 0x035F	; 0x80035f <countYellow+0x1>
     68e:	89 30       	cpi	r24, 0x09	; 9
     690:	91 05       	cpc	r25, r1
     692:	b4 f4       	brge	.+44     	; 0x6c0 <buttonYellow+0x3e>
     694:	20 91 54 03 	lds	r18, 0x0354	; 0x800354 <actualMode>
     698:	21 11       	cpse	r18, r1
     69a:	12 c0       	rjmp	.+36     	; 0x6c0 <buttonYellow+0x3e>
		countYellow = countYellow + 1 ;
     69c:	01 96       	adiw	r24, 0x01	; 1
     69e:	90 93 5f 03 	sts	0x035F, r25	; 0x80035f <countYellow+0x1>
     6a2:	80 93 5e 03 	sts	0x035E, r24	; 0x80035e <countYellow>
		yellowTimer = 4000*(countYellow) ;
     6a6:	40 ea       	ldi	r20, 0xA0	; 160
     6a8:	5f e0       	ldi	r21, 0x0F	; 15
     6aa:	84 9f       	mul	r24, r20
     6ac:	90 01       	movw	r18, r0
     6ae:	85 9f       	mul	r24, r21
     6b0:	30 0d       	add	r19, r0
     6b2:	94 9f       	mul	r25, r20
     6b4:	30 0d       	add	r19, r0
     6b6:	11 24       	eor	r1, r1
     6b8:	30 93 57 03 	sts	0x0357, r19	; 0x800357 <yellowTimer+0x1>
     6bc:	20 93 56 03 	sts	0x0356, r18	; 0x800356 <yellowTimer>
	}										//Função para verificar quando algum botão é pressionado
	if ( PINB&(1<<PINB3) && countYellow > 1 && actualMode==MANUAL) {
     6c0:	1b 9b       	sbis	0x03, 3	; 3
     6c2:	1d c0       	rjmp	.+58     	; 0x6fe <buttonYellow+0x7c>
     6c4:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <countYellow>
     6c8:	90 91 5f 03 	lds	r25, 0x035F	; 0x80035f <countYellow+0x1>
     6cc:	82 30       	cpi	r24, 0x02	; 2
     6ce:	91 05       	cpc	r25, r1
     6d0:	b4 f0       	brlt	.+44     	; 0x6fe <buttonYellow+0x7c>
     6d2:	20 91 54 03 	lds	r18, 0x0354	; 0x800354 <actualMode>
     6d6:	21 11       	cpse	r18, r1
     6d8:	12 c0       	rjmp	.+36     	; 0x6fe <buttonYellow+0x7c>
		countYellow = countYellow - 1 ;
     6da:	01 97       	sbiw	r24, 0x01	; 1
     6dc:	90 93 5f 03 	sts	0x035F, r25	; 0x80035f <countYellow+0x1>
     6e0:	80 93 5e 03 	sts	0x035E, r24	; 0x80035e <countYellow>
		yellowTimer = 4000*(countYellow) ;
     6e4:	40 ea       	ldi	r20, 0xA0	; 160
     6e6:	5f e0       	ldi	r21, 0x0F	; 15
     6e8:	84 9f       	mul	r24, r20
     6ea:	90 01       	movw	r18, r0
     6ec:	85 9f       	mul	r24, r21
     6ee:	30 0d       	add	r19, r0
     6f0:	94 9f       	mul	r25, r20
     6f2:	30 0d       	add	r19, r0
     6f4:	11 24       	eor	r1, r1
     6f6:	30 93 57 03 	sts	0x0357, r19	; 0x800357 <yellowTimer+0x1>
     6fa:	20 93 56 03 	sts	0x0356, r18	; 0x800356 <yellowTimer>
     6fe:	08 95       	ret

00000700 <buttonRed>:
	}
}

void buttonRed(){
	if ( PINB&(1<<PINB2) &&  countRed < 9 && actualMode==MANUAL) {
     700:	1a 9b       	sbis	0x03, 2	; 3
     702:	10 c0       	rjmp	.+32     	; 0x724 <buttonRed+0x24>
     704:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <countRed>
     708:	90 91 4e 03 	lds	r25, 0x034E	; 0x80034e <countRed+0x1>
     70c:	89 30       	cpi	r24, 0x09	; 9
     70e:	91 05       	cpc	r25, r1
     710:	4c f4       	brge	.+18     	; 0x724 <buttonRed+0x24>
     712:	20 91 54 03 	lds	r18, 0x0354	; 0x800354 <actualMode>
     716:	21 11       	cpse	r18, r1
     718:	05 c0       	rjmp	.+10     	; 0x724 <buttonRed+0x24>
		countRed = countRed + 1 ;
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	90 93 4e 03 	sts	0x034E, r25	; 0x80034e <countRed+0x1>
     720:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <countRed>
	}										//Função para verificar quando algum botão é pressionado
	if ( PINB&(1<<PINB3) && countRed > 1 && actualMode==MANUAL) {
     724:	1b 9b       	sbis	0x03, 3	; 3
     726:	10 c0       	rjmp	.+32     	; 0x748 <buttonRed+0x48>
     728:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <countRed>
     72c:	90 91 4e 03 	lds	r25, 0x034E	; 0x80034e <countRed+0x1>
     730:	82 30       	cpi	r24, 0x02	; 2
     732:	91 05       	cpc	r25, r1
     734:	4c f0       	brlt	.+18     	; 0x748 <buttonRed+0x48>
     736:	20 91 54 03 	lds	r18, 0x0354	; 0x800354 <actualMode>
     73a:	21 11       	cpse	r18, r1
     73c:	05 c0       	rjmp	.+10     	; 0x748 <buttonRed+0x48>
		countRed = countRed - 1 ;
     73e:	01 97       	sbiw	r24, 0x01	; 1
     740:	90 93 4e 03 	sts	0x034E, r25	; 0x80034e <countRed+0x1>
     744:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <countRed>
     748:	08 95       	ret

0000074a <reloadTextsGreen>:
	selectConfig();
	nokia_lcd_render();	
}

void reloadTextsGreen(){//G:45-20 Y:50-30  R:35-40	
	nokia_lcd_set_cursor(20, 20);
     74a:	64 e1       	ldi	r22, 0x14	; 20
     74c:	84 e1       	ldi	r24, 0x14	; 20
     74e:	0e 94 fe 02 	call	0x5fc	; 0x5fc <nokia_lcd_set_cursor>
	if(actualMode == MANUAL){
     752:	80 91 54 03 	lds	r24, 0x0354	; 0x800354 <actualMode>
     756:	81 11       	cpse	r24, r1
     758:	16 c0       	rjmp	.+44     	; 0x786 <reloadTextsGreen+0x3c>
		sprintf(greenNumber,"%d",manualGreen);
     75a:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <manualGreen+0x1>
     75e:	8f 93       	push	r24
     760:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <manualGreen>
     764:	8f 93       	push	r24
     766:	80 e0       	ldi	r24, 0x00	; 0
     768:	91 e0       	ldi	r25, 0x01	; 1
     76a:	9f 93       	push	r25
     76c:	8f 93       	push	r24
     76e:	80 91 4b 03 	lds	r24, 0x034B	; 0x80034b <greenNumber>
     772:	1f 92       	push	r1
     774:	8f 93       	push	r24
     776:	0e 94 1a 08 	call	0x1034	; 0x1034 <sprintf>
     77a:	0f 90       	pop	r0
     77c:	0f 90       	pop	r0
     77e:	0f 90       	pop	r0
     780:	0f 90       	pop	r0
     782:	0f 90       	pop	r0
     784:	0f 90       	pop	r0
	}
	if(actualMode == AUTO){
     786:	80 91 54 03 	lds	r24, 0x0354	; 0x800354 <actualMode>
     78a:	81 30       	cpi	r24, 0x01	; 1
     78c:	b1 f4       	brne	.+44     	; 0x7ba <reloadTextsGreen+0x70>
		sprintf(greenNumber,"%d",autoGreen);
     78e:	80 91 63 03 	lds	r24, 0x0363	; 0x800363 <autoGreen+0x1>
     792:	8f 93       	push	r24
     794:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <autoGreen>
     798:	8f 93       	push	r24
     79a:	80 e0       	ldi	r24, 0x00	; 0
     79c:	91 e0       	ldi	r25, 0x01	; 1
     79e:	9f 93       	push	r25
     7a0:	8f 93       	push	r24
     7a2:	80 91 4b 03 	lds	r24, 0x034B	; 0x80034b <greenNumber>
     7a6:	1f 92       	push	r1
     7a8:	8f 93       	push	r24
     7aa:	0e 94 1a 08 	call	0x1034	; 0x1034 <sprintf>
     7ae:	0f 90       	pop	r0
     7b0:	0f 90       	pop	r0
     7b2:	0f 90       	pop	r0
     7b4:	0f 90       	pop	r0
     7b6:	0f 90       	pop	r0
     7b8:	0f 90       	pop	r0
	}
	nokia_lcd_write_string(greenNumber,1);
     7ba:	80 91 4b 03 	lds	r24, 0x034B	; 0x80034b <greenNumber>
     7be:	61 e0       	ldi	r22, 0x01	; 1
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	0e 94 ed 02 	call	0x5da	; 0x5da <nokia_lcd_write_string>
	nokia_lcd_set_cursor(25,20);
     7c6:	64 e1       	ldi	r22, 0x14	; 20
     7c8:	89 e1       	ldi	r24, 0x19	; 25
     7ca:	0e 94 fe 02 	call	0x5fc	; 0x5fc <nokia_lcd_set_cursor>
	nokia_lcd_write_string("s",1);		
     7ce:	61 e0       	ldi	r22, 0x01	; 1
     7d0:	83 e0       	ldi	r24, 0x03	; 3
     7d2:	91 e0       	ldi	r25, 0x01	; 1
     7d4:	0e 94 ed 02 	call	0x5da	; 0x5da <nokia_lcd_write_string>
     7d8:	08 95       	ret

000007da <reloadTextsYellow>:
}

void reloadTextsYellow(){	
	nokia_lcd_set_cursor(20,30);
     7da:	6e e1       	ldi	r22, 0x1E	; 30
     7dc:	84 e1       	ldi	r24, 0x14	; 20
     7de:	0e 94 fe 02 	call	0x5fc	; 0x5fc <nokia_lcd_set_cursor>
	sprintf(yellowNumber,"%d",countYellow);
     7e2:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <countYellow+0x1>
     7e6:	8f 93       	push	r24
     7e8:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <countYellow>
     7ec:	8f 93       	push	r24
     7ee:	80 e0       	ldi	r24, 0x00	; 0
     7f0:	91 e0       	ldi	r25, 0x01	; 1
     7f2:	9f 93       	push	r25
     7f4:	8f 93       	push	r24
     7f6:	80 91 55 03 	lds	r24, 0x0355	; 0x800355 <yellowNumber>
     7fa:	1f 92       	push	r1
     7fc:	8f 93       	push	r24
     7fe:	0e 94 1a 08 	call	0x1034	; 0x1034 <sprintf>
	nokia_lcd_write_string(yellowNumber,1);
     802:	80 91 55 03 	lds	r24, 0x0355	; 0x800355 <yellowNumber>
     806:	61 e0       	ldi	r22, 0x01	; 1
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	0e 94 ed 02 	call	0x5da	; 0x5da <nokia_lcd_write_string>
	nokia_lcd_set_cursor(25,30);
     80e:	6e e1       	ldi	r22, 0x1E	; 30
     810:	89 e1       	ldi	r24, 0x19	; 25
     812:	0e 94 fe 02 	call	0x5fc	; 0x5fc <nokia_lcd_set_cursor>
	nokia_lcd_write_string("s",1);
     816:	61 e0       	ldi	r22, 0x01	; 1
     818:	83 e0       	ldi	r24, 0x03	; 3
     81a:	91 e0       	ldi	r25, 0x01	; 1
     81c:	0e 94 ed 02 	call	0x5da	; 0x5da <nokia_lcd_write_string>
}
     820:	0f 90       	pop	r0
     822:	0f 90       	pop	r0
     824:	0f 90       	pop	r0
     826:	0f 90       	pop	r0
     828:	0f 90       	pop	r0
     82a:	0f 90       	pop	r0
     82c:	08 95       	ret

0000082e <reloadTextsRed>:
	
void reloadTextsRed(){	
	nokia_lcd_set_cursor(20,40);
     82e:	68 e2       	ldi	r22, 0x28	; 40
     830:	84 e1       	ldi	r24, 0x14	; 20
     832:	0e 94 fe 02 	call	0x5fc	; 0x5fc <nokia_lcd_set_cursor>
	if(actualMode == MANUAL)
     836:	80 91 54 03 	lds	r24, 0x0354	; 0x800354 <actualMode>
     83a:	81 11       	cpse	r24, r1
     83c:	16 c0       	rjmp	.+44     	; 0x86a <reloadTextsRed+0x3c>
		sprintf(redNumber,"%d",manualRed);
     83e:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <manualRed+0x1>
     842:	8f 93       	push	r24
     844:	80 91 45 03 	lds	r24, 0x0345	; 0x800345 <manualRed>
     848:	8f 93       	push	r24
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	91 e0       	ldi	r25, 0x01	; 1
     84e:	9f 93       	push	r25
     850:	8f 93       	push	r24
     852:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <redNumber>
     856:	1f 92       	push	r1
     858:	8f 93       	push	r24
     85a:	0e 94 1a 08 	call	0x1034	; 0x1034 <sprintf>
     85e:	0f 90       	pop	r0
     860:	0f 90       	pop	r0
     862:	0f 90       	pop	r0
     864:	0f 90       	pop	r0
     866:	0f 90       	pop	r0
     868:	0f 90       	pop	r0
	if(actualMode == AUTO)
     86a:	80 91 54 03 	lds	r24, 0x0354	; 0x800354 <actualMode>
     86e:	81 30       	cpi	r24, 0x01	; 1
     870:	b1 f4       	brne	.+44     	; 0x89e <reloadTextsRed+0x70>
		sprintf(redNumber,"%d",autoRed);
     872:	80 91 52 03 	lds	r24, 0x0352	; 0x800352 <autoRed+0x1>
     876:	8f 93       	push	r24
     878:	80 91 51 03 	lds	r24, 0x0351	; 0x800351 <autoRed>
     87c:	8f 93       	push	r24
     87e:	80 e0       	ldi	r24, 0x00	; 0
     880:	91 e0       	ldi	r25, 0x01	; 1
     882:	9f 93       	push	r25
     884:	8f 93       	push	r24
     886:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <redNumber>
     88a:	1f 92       	push	r1
     88c:	8f 93       	push	r24
     88e:	0e 94 1a 08 	call	0x1034	; 0x1034 <sprintf>
     892:	0f 90       	pop	r0
     894:	0f 90       	pop	r0
     896:	0f 90       	pop	r0
     898:	0f 90       	pop	r0
     89a:	0f 90       	pop	r0
     89c:	0f 90       	pop	r0
	nokia_lcd_write_string(redNumber,1);
     89e:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <redNumber>
     8a2:	61 e0       	ldi	r22, 0x01	; 1
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	0e 94 ed 02 	call	0x5da	; 0x5da <nokia_lcd_write_string>
	nokia_lcd_set_cursor(25,40);
     8aa:	68 e2       	ldi	r22, 0x28	; 40
     8ac:	89 e1       	ldi	r24, 0x19	; 25
     8ae:	0e 94 fe 02 	call	0x5fc	; 0x5fc <nokia_lcd_set_cursor>
	nokia_lcd_write_string("s",1);
     8b2:	61 e0       	ldi	r22, 0x01	; 1
     8b4:	83 e0       	ldi	r24, 0x03	; 3
     8b6:	91 e0       	ldi	r25, 0x01	; 1
     8b8:	0e 94 ed 02 	call	0x5da	; 0x5da <nokia_lcd_write_string>
     8bc:	08 95       	ret

000008be <reloadTextsMode>:
	
}

void reloadTextsMode(){ //Mostrar no display o modo de operação atual
	nokia_lcd_set_cursor(35,0);
     8be:	60 e0       	ldi	r22, 0x00	; 0
     8c0:	83 e2       	ldi	r24, 0x23	; 35
     8c2:	0e 94 fe 02 	call	0x5fc	; 0x5fc <nokia_lcd_set_cursor>
	if(actualMode == AUTO){
     8c6:	80 91 54 03 	lds	r24, 0x0354	; 0x800354 <actualMode>
     8ca:	81 30       	cpi	r24, 0x01	; 1
     8cc:	29 f4       	brne	.+10     	; 0x8d8 <reloadTextsMode+0x1a>
		nokia_lcd_write_string("A",1);
     8ce:	61 e0       	ldi	r22, 0x01	; 1
     8d0:	85 e0       	ldi	r24, 0x05	; 5
     8d2:	91 e0       	ldi	r25, 0x01	; 1
     8d4:	0e 94 ed 02 	call	0x5da	; 0x5da <nokia_lcd_write_string>
	}
	if(actualMode == MANUAL){
     8d8:	80 91 54 03 	lds	r24, 0x0354	; 0x800354 <actualMode>
     8dc:	81 11       	cpse	r24, r1
     8de:	05 c0       	rjmp	.+10     	; 0x8ea <reloadTextsMode+0x2c>
		nokia_lcd_write_string("M",1);
     8e0:	61 e0       	ldi	r22, 0x01	; 1
     8e2:	87 e0       	ldi	r24, 0x07	; 7
     8e4:	91 e0       	ldi	r25, 0x01	; 1
     8e6:	0e 94 ed 02 	call	0x5da	; 0x5da <nokia_lcd_write_string>
     8ea:	08 95       	ret

000008ec <reloadTextsLux>:
	}
}

void reloadTextsLux(){ //Mostrar no display o valor de lux
	nokia_lcd_set_cursor(50, 10);
     8ec:	6a e0       	ldi	r22, 0x0A	; 10
     8ee:	82 e3       	ldi	r24, 0x32	; 50
     8f0:	0e 94 fe 02 	call	0x5fc	; 0x5fc <nokia_lcd_set_cursor>
	//////////////////////////////////////////////////////////////
	//sprintf(luxWrite,"%f",(844264600 + (14.21979 - 844264600))/(1 + powf((luxRead/6060036),1.574674)));				// Ver o valor lido 
	// Por algum motivo dando erro; Semana de prova ta osso
	//nokia_lcd_write_string(luxWrite,1);			//
	//////////////////////////////////////////////////////////////
	if (luxRead>472){ //Caso em q Lux do ldr > 300
     8f4:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <luxRead>
     8f8:	90 91 42 03 	lds	r25, 0x0342	; 0x800342 <luxRead+0x1>
     8fc:	89 3d       	cpi	r24, 0xD9	; 217
     8fe:	21 e0       	ldi	r18, 0x01	; 1
     900:	92 07       	cpc	r25, r18
     902:	34 f0       	brlt	.+12     	; 0x910 <__stack+0x11>
		//Desliga luz
		nokia_lcd_write_string("OFF",1);
     904:	61 e0       	ldi	r22, 0x01	; 1
     906:	89 e0       	ldi	r24, 0x09	; 9
     908:	91 e0       	ldi	r25, 0x01	; 1
     90a:	0e 94 ed 02 	call	0x5da	; 0x5da <nokia_lcd_write_string>
     90e:	08 95       	ret
	}
	else if (luxRead<473&& (PINB&(1<<PINB7)|| carFreq != 0)){ // caso lux do ldr <300 e pessoas ou carros
     910:	89 3d       	cpi	r24, 0xD9	; 217
     912:	21 e0       	ldi	r18, 0x01	; 1
     914:	92 07       	cpc	r25, r18
     916:	74 f4       	brge	.+28     	; 0x934 <__stack+0x35>
     918:	1f 99       	sbic	0x03, 7	; 3
     91a:	06 c0       	rjmp	.+12     	; 0x928 <__stack+0x29>
     91c:	20 91 3e 03 	lds	r18, 0x033E	; 0x80033e <carFreq>
     920:	30 91 3f 03 	lds	r19, 0x033F	; 0x80033f <carFreq+0x1>
     924:	23 2b       	or	r18, r19
     926:	31 f0       	breq	.+12     	; 0x934 <__stack+0x35>
		//Acende luz 100%
		nokia_lcd_write_string("ON",1);
     928:	61 e0       	ldi	r22, 0x01	; 1
     92a:	8d e0       	ldi	r24, 0x0D	; 13
     92c:	91 e0       	ldi	r25, 0x01	; 1
     92e:	0e 94 ed 02 	call	0x5da	; 0x5da <nokia_lcd_write_string>
     932:	08 95       	ret
	}
	else if (luxRead<473&& (!PINB&(1<<PINB7)|| carFreq == 0)){ // caso lux do ldr <300 sem pessoas ou carros
     934:	89 3d       	cpi	r24, 0xD9	; 217
     936:	91 40       	sbci	r25, 0x01	; 1
     938:	64 f4       	brge	.+24     	; 0x952 <__stack+0x53>
     93a:	83 b1       	in	r24, 0x03	; 3
     93c:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <carFreq>
     940:	90 91 3f 03 	lds	r25, 0x033F	; 0x80033f <carFreq+0x1>
     944:	89 2b       	or	r24, r25
     946:	29 f4       	brne	.+10     	; 0x952 <__stack+0x53>
		//Acende luz 30%
		nokia_lcd_write_string("ON",1);
     948:	61 e0       	ldi	r22, 0x01	; 1
     94a:	8d e0       	ldi	r24, 0x0D	; 13
     94c:	91 e0       	ldi	r25, 0x01	; 1
     94e:	0e 94 ed 02 	call	0x5da	; 0x5da <nokia_lcd_write_string>
     952:	08 95       	ret

00000954 <reloadTextsCarFreq>:
	}
	//////////////////////////////////////////////////////////////
}

void reloadTextsCarFreq(){
	sprintf(freq,"%d",carFreq);
     954:	80 91 3f 03 	lds	r24, 0x033F	; 0x80033f <carFreq+0x1>
     958:	8f 93       	push	r24
     95a:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <carFreq>
     95e:	8f 93       	push	r24
     960:	80 e0       	ldi	r24, 0x00	; 0
     962:	91 e0       	ldi	r25, 0x01	; 1
     964:	9f 93       	push	r25
     966:	8f 93       	push	r24
     968:	89 e3       	ldi	r24, 0x39	; 57
     96a:	93 e0       	ldi	r25, 0x03	; 3
     96c:	9f 93       	push	r25
     96e:	8f 93       	push	r24
     970:	0e 94 1a 08 	call	0x1034	; 0x1034 <sprintf>
	nokia_lcd_set_cursor(56,40);
     974:	68 e2       	ldi	r22, 0x28	; 40
     976:	88 e3       	ldi	r24, 0x38	; 56
     978:	0e 94 fe 02 	call	0x5fc	; 0x5fc <nokia_lcd_set_cursor>
	nokia_lcd_write_string(freq,1);
     97c:	61 e0       	ldi	r22, 0x01	; 1
     97e:	89 e3       	ldi	r24, 0x39	; 57
     980:	93 e0       	ldi	r25, 0x03	; 3
     982:	0e 94 ed 02 	call	0x5da	; 0x5da <nokia_lcd_write_string>
}
     986:	0f 90       	pop	r0
     988:	0f 90       	pop	r0
     98a:	0f 90       	pop	r0
     98c:	0f 90       	pop	r0
     98e:	0f 90       	pop	r0
     990:	0f 90       	pop	r0
     992:	08 95       	ret

00000994 <printLine>:

void printLine(){
	nokia_lcd_set_cursor(45,0);
     994:	60 e0       	ldi	r22, 0x00	; 0
     996:	8d e2       	ldi	r24, 0x2D	; 45
     998:	0e 94 fe 02 	call	0x5fc	; 0x5fc <nokia_lcd_set_cursor>
	nokia_lcd_write_string("|",1);
     99c:	61 e0       	ldi	r22, 0x01	; 1
     99e:	80 e1       	ldi	r24, 0x10	; 16
     9a0:	91 e0       	ldi	r25, 0x01	; 1
     9a2:	0e 94 ed 02 	call	0x5da	; 0x5da <nokia_lcd_write_string>
	nokia_lcd_set_cursor(45,10);
     9a6:	6a e0       	ldi	r22, 0x0A	; 10
     9a8:	8d e2       	ldi	r24, 0x2D	; 45
     9aa:	0e 94 fe 02 	call	0x5fc	; 0x5fc <nokia_lcd_set_cursor>
	nokia_lcd_write_string("|",1);
     9ae:	61 e0       	ldi	r22, 0x01	; 1
     9b0:	80 e1       	ldi	r24, 0x10	; 16
     9b2:	91 e0       	ldi	r25, 0x01	; 1
     9b4:	0e 94 ed 02 	call	0x5da	; 0x5da <nokia_lcd_write_string>
	nokia_lcd_set_cursor(45,20);
     9b8:	64 e1       	ldi	r22, 0x14	; 20
     9ba:	8d e2       	ldi	r24, 0x2D	; 45
     9bc:	0e 94 fe 02 	call	0x5fc	; 0x5fc <nokia_lcd_set_cursor>
	nokia_lcd_write_string("|",1);
     9c0:	61 e0       	ldi	r22, 0x01	; 1
     9c2:	80 e1       	ldi	r24, 0x10	; 16
     9c4:	91 e0       	ldi	r25, 0x01	; 1
     9c6:	0e 94 ed 02 	call	0x5da	; 0x5da <nokia_lcd_write_string>
	nokia_lcd_set_cursor(45,30);
     9ca:	6e e1       	ldi	r22, 0x1E	; 30
     9cc:	8d e2       	ldi	r24, 0x2D	; 45
     9ce:	0e 94 fe 02 	call	0x5fc	; 0x5fc <nokia_lcd_set_cursor>
	nokia_lcd_write_string("|",1);
     9d2:	61 e0       	ldi	r22, 0x01	; 1
     9d4:	80 e1       	ldi	r24, 0x10	; 16
     9d6:	91 e0       	ldi	r25, 0x01	; 1
     9d8:	0e 94 ed 02 	call	0x5da	; 0x5da <nokia_lcd_write_string>
	nokia_lcd_set_cursor(45,40);
     9dc:	68 e2       	ldi	r22, 0x28	; 40
     9de:	8d e2       	ldi	r24, 0x2D	; 45
     9e0:	0e 94 fe 02 	call	0x5fc	; 0x5fc <nokia_lcd_set_cursor>
	nokia_lcd_write_string("|",1);
     9e4:	61 e0       	ldi	r22, 0x01	; 1
     9e6:	80 e1       	ldi	r24, 0x10	; 16
     9e8:	91 e0       	ldi	r25, 0x01	; 1
     9ea:	0e 94 ed 02 	call	0x5da	; 0x5da <nokia_lcd_write_string>
	nokia_lcd_set_cursor(45,50);
     9ee:	62 e3       	ldi	r22, 0x32	; 50
     9f0:	8d e2       	ldi	r24, 0x2D	; 45
     9f2:	0e 94 fe 02 	call	0x5fc	; 0x5fc <nokia_lcd_set_cursor>
	nokia_lcd_write_string("|",1);
     9f6:	61 e0       	ldi	r22, 0x01	; 1
     9f8:	80 e1       	ldi	r24, 0x10	; 16
     9fa:	91 e0       	ldi	r25, 0x01	; 1
     9fc:	0e 94 ed 02 	call	0x5da	; 0x5da <nokia_lcd_write_string>
     a00:	08 95       	ret

00000a02 <selectConfig>:
}

void selectConfig(){ //Função para setar o indicador de estado no display e indicar qual o próximo estado
	switch(State){
     a02:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <State>
     a06:	81 30       	cpi	r24, 0x01	; 1
     a08:	99 f0       	breq	.+38     	; 0xa30 <selectConfig+0x2e>
     a0a:	28 f0       	brcs	.+10     	; 0xa16 <selectConfig+0x14>
     a0c:	82 30       	cpi	r24, 0x02	; 2
     a0e:	e9 f0       	breq	.+58     	; 0xa4a <selectConfig+0x48>
     a10:	83 30       	cpi	r24, 0x03	; 3
     a12:	41 f1       	breq	.+80     	; 0xa64 <selectConfig+0x62>
     a14:	32 c0       	rjmp	.+100    	; 0xa7a <selectConfig+0x78>
		case GREEN:
			nokia_lcd_set_cursor(40,20);
     a16:	64 e1       	ldi	r22, 0x14	; 20
     a18:	88 e2       	ldi	r24, 0x28	; 40
     a1a:	0e 94 fe 02 	call	0x5fc	; 0x5fc <nokia_lcd_set_cursor>
			nokia_lcd_write_string("<",1);
     a1e:	61 e0       	ldi	r22, 0x01	; 1
     a20:	82 e1       	ldi	r24, 0x12	; 18
     a22:	91 e0       	ldi	r25, 0x01	; 1
     a24:	0e 94 ed 02 	call	0x5da	; 0x5da <nokia_lcd_write_string>
			nextState = YELLOW;
     a28:	81 e0       	ldi	r24, 0x01	; 1
     a2a:	80 93 4c 03 	sts	0x034C, r24	; 0x80034c <nextState>
			break;
     a2e:	25 c0       	rjmp	.+74     	; 0xa7a <selectConfig+0x78>
		
		case YELLOW:
			nokia_lcd_set_cursor(40,30);
     a30:	6e e1       	ldi	r22, 0x1E	; 30
     a32:	88 e2       	ldi	r24, 0x28	; 40
     a34:	0e 94 fe 02 	call	0x5fc	; 0x5fc <nokia_lcd_set_cursor>
			nokia_lcd_write_string("<",1);
     a38:	61 e0       	ldi	r22, 0x01	; 1
     a3a:	82 e1       	ldi	r24, 0x12	; 18
     a3c:	91 e0       	ldi	r25, 0x01	; 1
     a3e:	0e 94 ed 02 	call	0x5da	; 0x5da <nokia_lcd_write_string>
			nextState = RED;
     a42:	82 e0       	ldi	r24, 0x02	; 2
     a44:	80 93 4c 03 	sts	0x034C, r24	; 0x80034c <nextState>
			break;
     a48:	18 c0       	rjmp	.+48     	; 0xa7a <selectConfig+0x78>
		
		case RED:
			nokia_lcd_set_cursor(40,40);
     a4a:	68 e2       	ldi	r22, 0x28	; 40
     a4c:	88 e2       	ldi	r24, 0x28	; 40
     a4e:	0e 94 fe 02 	call	0x5fc	; 0x5fc <nokia_lcd_set_cursor>
			nokia_lcd_write_string("<",1);
     a52:	61 e0       	ldi	r22, 0x01	; 1
     a54:	82 e1       	ldi	r24, 0x12	; 18
     a56:	91 e0       	ldi	r25, 0x01	; 1
     a58:	0e 94 ed 02 	call	0x5da	; 0x5da <nokia_lcd_write_string>
			nextState = MODE_SELECT;
     a5c:	83 e0       	ldi	r24, 0x03	; 3
     a5e:	80 93 4c 03 	sts	0x034C, r24	; 0x80034c <nextState>
			break;
     a62:	0b c0       	rjmp	.+22     	; 0xa7a <selectConfig+0x78>
		case MODE_SELECT:
			nokia_lcd_set_cursor(40,0);
     a64:	60 e0       	ldi	r22, 0x00	; 0
     a66:	88 e2       	ldi	r24, 0x28	; 40
     a68:	0e 94 fe 02 	call	0x5fc	; 0x5fc <nokia_lcd_set_cursor>
			nokia_lcd_write_string("<",1);	
     a6c:	61 e0       	ldi	r22, 0x01	; 1
     a6e:	82 e1       	ldi	r24, 0x12	; 18
     a70:	91 e0       	ldi	r25, 0x01	; 1
     a72:	0e 94 ed 02 	call	0x5da	; 0x5da <nokia_lcd_write_string>
			nextState = GREEN;
     a76:	10 92 4c 03 	sts	0x034C, r1	; 0x80034c <nextState>
			break;
	}
	switch(actualMode){
     a7a:	80 91 54 03 	lds	r24, 0x0354	; 0x800354 <actualMode>
     a7e:	88 23       	and	r24, r24
     a80:	29 f0       	breq	.+10     	; 0xa8c <selectConfig+0x8a>
     a82:	81 30       	cpi	r24, 0x01	; 1
     a84:	31 f4       	brne	.+12     	; 0xa92 <selectConfig+0x90>
		case AUTO:
			nextMode = MANUAL;
     a86:	10 92 64 03 	sts	0x0364, r1	; 0x800364 <nextMode>
			break;
     a8a:	08 95       	ret
						//Alterna o proximo estado do modo de operação dependedo do atual
		case MANUAL:
			nextMode = AUTO;
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <nextMode>
     a92:	08 95       	ret

00000a94 <checkMode>:
			break; 
	}
}

void checkMode(){
	if(actualMode == MANUAL){//Configura as variaveis para o modo manual
     a94:	80 91 54 03 	lds	r24, 0x0354	; 0x800354 <actualMode>
     a98:	81 11       	cpse	r24, r1
     a9a:	28 c0       	rjmp	.+80     	; 0xaec <checkMode+0x58>
		manualGreen = countGreen ;
     a9c:	60 91 34 03 	lds	r22, 0x0334	; 0x800334 <countGreen>
     aa0:	70 91 35 03 	lds	r23, 0x0335	; 0x800335 <countGreen+0x1>
     aa4:	70 93 61 03 	sts	0x0361, r23	; 0x800361 <manualGreen+0x1>
     aa8:	60 93 60 03 	sts	0x0360, r22	; 0x800360 <manualGreen>
		manualRed = countRed ;
     aac:	40 91 4d 03 	lds	r20, 0x034D	; 0x80034d <countRed>
     ab0:	50 91 4e 03 	lds	r21, 0x034E	; 0x80034e <countRed+0x1>
     ab4:	50 93 46 03 	sts	0x0346, r21	; 0x800346 <manualRed+0x1>
     ab8:	40 93 45 03 	sts	0x0345, r20	; 0x800345 <manualRed>
		greenTimer = 1000*manualGreen ;
     abc:	28 ee       	ldi	r18, 0xE8	; 232
     abe:	33 e0       	ldi	r19, 0x03	; 3
     ac0:	62 9f       	mul	r22, r18
     ac2:	f0 01       	movw	r30, r0
     ac4:	63 9f       	mul	r22, r19
     ac6:	f0 0d       	add	r31, r0
     ac8:	72 9f       	mul	r23, r18
     aca:	f0 0d       	add	r31, r0
     acc:	11 24       	eor	r1, r1
     ace:	f0 93 37 03 	sts	0x0337, r31	; 0x800337 <greenTimer+0x1>
     ad2:	e0 93 36 03 	sts	0x0336, r30	; 0x800336 <greenTimer>
		redTimer = 1000*manualRed ;
     ad6:	42 9f       	mul	r20, r18
     ad8:	b0 01       	movw	r22, r0
     ada:	43 9f       	mul	r20, r19
     adc:	70 0d       	add	r23, r0
     ade:	52 9f       	mul	r21, r18
     ae0:	70 0d       	add	r23, r0
     ae2:	11 24       	eor	r1, r1
     ae4:	70 93 5d 03 	sts	0x035D, r23	; 0x80035d <redTimer+0x1>
     ae8:	60 93 5c 03 	sts	0x035C, r22	; 0x80035c <redTimer>
	}
	if(actualMode == AUTO){//Configura as variaveis para o modo automatico
     aec:	81 30       	cpi	r24, 0x01	; 1
     aee:	09 f0       	breq	.+2      	; 0xaf2 <checkMode+0x5e>
     af0:	48 c0       	rjmp	.+144    	; 0xb82 <checkMode+0xee>
		autoGreen = (carFreq/60)+1;
     af2:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <carFreq>
     af6:	90 91 3f 03 	lds	r25, 0x033F	; 0x80033f <carFreq+0x1>
     afa:	6c e3       	ldi	r22, 0x3C	; 60
     afc:	70 e0       	ldi	r23, 0x00	; 0
     afe:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <__divmodhi4>
     b02:	6f 5f       	subi	r22, 0xFF	; 255
     b04:	7f 4f       	sbci	r23, 0xFF	; 255
     b06:	70 93 63 03 	sts	0x0363, r23	; 0x800363 <autoGreen+0x1>
     b0a:	60 93 62 03 	sts	0x0362, r22	; 0x800362 <autoGreen>
		if(autoGreen>9){
     b0e:	6a 30       	cpi	r22, 0x0A	; 10
     b10:	71 05       	cpc	r23, r1
     b12:	34 f0       	brlt	.+12     	; 0xb20 <checkMode+0x8c>
			autoGreen = 9;
     b14:	89 e0       	ldi	r24, 0x09	; 9
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	90 93 63 03 	sts	0x0363, r25	; 0x800363 <autoGreen+0x1>
     b1c:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <autoGreen>
		}
		autoRed = 10-autoGreen;
     b20:	20 91 62 03 	lds	r18, 0x0362	; 0x800362 <autoGreen>
     b24:	30 91 63 03 	lds	r19, 0x0363	; 0x800363 <autoGreen+0x1>
     b28:	8a e0       	ldi	r24, 0x0A	; 10
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	82 1b       	sub	r24, r18
     b2e:	93 0b       	sbc	r25, r19
     b30:	90 93 52 03 	sts	0x0352, r25	; 0x800352 <autoRed+0x1>
     b34:	80 93 51 03 	sts	0x0351, r24	; 0x800351 <autoRed>
		if(autoRed<1){
     b38:	18 16       	cp	r1, r24
     b3a:	19 06       	cpc	r1, r25
     b3c:	34 f0       	brlt	.+12     	; 0xb4a <checkMode+0xb6>
			autoRed = 1 ;
     b3e:	81 e0       	ldi	r24, 0x01	; 1
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	90 93 52 03 	sts	0x0352, r25	; 0x800352 <autoRed+0x1>
     b46:	80 93 51 03 	sts	0x0351, r24	; 0x800351 <autoRed>
		}
		greenTimer = 1000*autoGreen ;
     b4a:	88 ee       	ldi	r24, 0xE8	; 232
     b4c:	93 e0       	ldi	r25, 0x03	; 3
     b4e:	28 9f       	mul	r18, r24
     b50:	a0 01       	movw	r20, r0
     b52:	29 9f       	mul	r18, r25
     b54:	50 0d       	add	r21, r0
     b56:	38 9f       	mul	r19, r24
     b58:	50 0d       	add	r21, r0
     b5a:	11 24       	eor	r1, r1
     b5c:	50 93 37 03 	sts	0x0337, r21	; 0x800337 <greenTimer+0x1>
     b60:	40 93 36 03 	sts	0x0336, r20	; 0x800336 <greenTimer>
		redTimer = 1000*autoRed ;
     b64:	40 91 51 03 	lds	r20, 0x0351	; 0x800351 <autoRed>
     b68:	50 91 52 03 	lds	r21, 0x0352	; 0x800352 <autoRed+0x1>
     b6c:	48 9f       	mul	r20, r24
     b6e:	90 01       	movw	r18, r0
     b70:	49 9f       	mul	r20, r25
     b72:	30 0d       	add	r19, r0
     b74:	58 9f       	mul	r21, r24
     b76:	30 0d       	add	r19, r0
     b78:	11 24       	eor	r1, r1
     b7a:	30 93 5d 03 	sts	0x035D, r19	; 0x80035d <redTimer+0x1>
     b7e:	20 93 5c 03 	sts	0x035C, r18	; 0x80035c <redTimer>
     b82:	08 95       	ret

00000b84 <reloadDisplay>:
		reloadDisplay();
	}
}

void reloadDisplay(){
	nokia_lcd_clear();
     b84:	0e 94 25 02 	call	0x44a	; 0x44a <nokia_lcd_clear>
	nokia_lcd_write_string("MODO:",1);
     b88:	61 e0       	ldi	r22, 0x01	; 1
     b8a:	84 e1       	ldi	r24, 0x14	; 20
     b8c:	91 e0       	ldi	r25, 0x01	; 1
     b8e:	0e 94 ed 02 	call	0x5da	; 0x5da <nokia_lcd_write_string>
	nokia_lcd_set_cursor(0, 10);
     b92:	6a e0       	ldi	r22, 0x0A	; 10
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	0e 94 fe 02 	call	0x5fc	; 0x5fc <nokia_lcd_set_cursor>
	nokia_lcd_write_string("========", 1);
     b9a:	61 e0       	ldi	r22, 0x01	; 1
     b9c:	8a e1       	ldi	r24, 0x1A	; 26
     b9e:	91 e0       	ldi	r25, 0x01	; 1
     ba0:	0e 94 ed 02 	call	0x5da	; 0x5da <nokia_lcd_write_string>
	nokia_lcd_set_cursor(0, 20);
     ba4:	64 e1       	ldi	r22, 0x14	; 20
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	0e 94 fe 02 	call	0x5fc	; 0x5fc <nokia_lcd_set_cursor>
	nokia_lcd_write_string("T.G",1);
     bac:	61 e0       	ldi	r22, 0x01	; 1
     bae:	83 e2       	ldi	r24, 0x23	; 35
     bb0:	91 e0       	ldi	r25, 0x01	; 1
     bb2:	0e 94 ed 02 	call	0x5da	; 0x5da <nokia_lcd_write_string>
	nokia_lcd_set_cursor(0, 30);
     bb6:	6e e1       	ldi	r22, 0x1E	; 30
     bb8:	80 e0       	ldi	r24, 0x00	; 0
     bba:	0e 94 fe 02 	call	0x5fc	; 0x5fc <nokia_lcd_set_cursor>
	nokia_lcd_write_string("T.Y", 1);
     bbe:	61 e0       	ldi	r22, 0x01	; 1
     bc0:	87 e2       	ldi	r24, 0x27	; 39
     bc2:	91 e0       	ldi	r25, 0x01	; 1
     bc4:	0e 94 ed 02 	call	0x5da	; 0x5da <nokia_lcd_write_string>
	nokia_lcd_set_cursor(0, 40);
     bc8:	68 e2       	ldi	r22, 0x28	; 40
     bca:	80 e0       	ldi	r24, 0x00	; 0
     bcc:	0e 94 fe 02 	call	0x5fc	; 0x5fc <nokia_lcd_set_cursor>
	nokia_lcd_write_string("T.R",1);
     bd0:	61 e0       	ldi	r22, 0x01	; 1
     bd2:	8b e2       	ldi	r24, 0x2B	; 43
     bd4:	91 e0       	ldi	r25, 0x01	; 1
     bd6:	0e 94 ed 02 	call	0x5da	; 0x5da <nokia_lcd_write_string>
	nokia_lcd_set_cursor(50, 0);
     bda:	60 e0       	ldi	r22, 0x00	; 0
     bdc:	82 e3       	ldi	r24, 0x32	; 50
     bde:	0e 94 fe 02 	call	0x5fc	; 0x5fc <nokia_lcd_set_cursor>
	nokia_lcd_write_string(" Luz",1);
     be2:	61 e0       	ldi	r22, 0x01	; 1
     be4:	8f e2       	ldi	r24, 0x2F	; 47
     be6:	91 e0       	ldi	r25, 0x01	; 1
     be8:	0e 94 ed 02 	call	0x5da	; 0x5da <nokia_lcd_write_string>
	checkMode();
     bec:	0e 94 4a 05 	call	0xa94	; 0xa94 <checkMode>
	reloadTextsGreen();
     bf0:	0e 94 a5 03 	call	0x74a	; 0x74a <reloadTextsGreen>
	reloadTextsRed();
     bf4:	0e 94 17 04 	call	0x82e	; 0x82e <reloadTextsRed>
	printLine();
     bf8:	0e 94 ca 04 	call	0x994	; 0x994 <printLine>
	nokia_lcd_set_cursor(50, 30);
     bfc:	6e e1       	ldi	r22, 0x1E	; 30
     bfe:	82 e3       	ldi	r24, 0x32	; 50
     c00:	0e 94 fe 02 	call	0x5fc	; 0x5fc <nokia_lcd_set_cursor>
	nokia_lcd_write_string("C/Min",1);
     c04:	61 e0       	ldi	r22, 0x01	; 1
     c06:	84 e3       	ldi	r24, 0x34	; 52
     c08:	91 e0       	ldi	r25, 0x01	; 1
     c0a:	0e 94 ed 02 	call	0x5da	; 0x5da <nokia_lcd_write_string>
	nokia_lcd_set_cursor(50, 40);
     c0e:	68 e2       	ldi	r22, 0x28	; 40
     c10:	82 e3       	ldi	r24, 0x32	; 50
     c12:	0e 94 fe 02 	call	0x5fc	; 0x5fc <nokia_lcd_set_cursor>
	nokia_lcd_write_string("=",1);
     c16:	61 e0       	ldi	r22, 0x01	; 1
     c18:	81 e2       	ldi	r24, 0x21	; 33
     c1a:	91 e0       	ldi	r25, 0x01	; 1
     c1c:	0e 94 ed 02 	call	0x5da	; 0x5da <nokia_lcd_write_string>
	reloadTextsMode();
     c20:	0e 94 5f 04 	call	0x8be	; 0x8be <reloadTextsMode>
	reloadTextsCarFreq();
     c24:	0e 94 aa 04 	call	0x954	; 0x954 <reloadTextsCarFreq>
	reloadTextsYellow();
     c28:	0e 94 ed 03 	call	0x7da	; 0x7da <reloadTextsYellow>
	reloadTextsLux();
     c2c:	0e 94 76 04 	call	0x8ec	; 0x8ec <reloadTextsLux>
	selectConfig();
     c30:	0e 94 01 05 	call	0xa02	; 0xa02 <selectConfig>
	nokia_lcd_render();	
     c34:	0e 94 03 03 	call	0x606	; 0x606 <nokia_lcd_render>
     c38:	08 95       	ret

00000c3a <start>:
#include "semaforo.h"


void start(){
	///////////////////////////////////////////////////////////////////////////////////////////
	DDRB  = 0b00000010 ; //Definir qual pino usar no caso B1
     c3a:	92 e0       	ldi	r25, 0x02	; 2
     c3c:	94 b9       	out	0x04, r25	; 4
	PORTB = 0b00000000 ;//Inicializar o  B=0
     c3e:	15 b8       	out	0x05, r1	; 5
	
	DDRC  = 0b11111110 ; //Definir qual pino usar no caso C1(clockSignal),C0(reset)
     c40:	8e ef       	ldi	r24, 0xFE	; 254
     c42:	87 b9       	out	0x07, r24	; 7
	PORTC = 0b00000000 ;//Inicializar o  C = 0
     c44:	18 b8       	out	0x08, r1	; 8
	
	DDRD  = 0b11110011 ; //Definir D como saida
     c46:	83 ef       	ldi	r24, 0xF3	; 243
     c48:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0b00000000 ;
     c4a:	1b b8       	out	0x0b, r1	; 11
	
	EIMSK = 0b00000011;  //Utilizar INT0 para saber se qualquer botão foi pressionado
     c4c:	83 e0       	ldi	r24, 0x03	; 3
     c4e:	8d bb       	out	0x1d, r24	; 29
	EICRA = 0b00001011; // Sensível borda de subida
     c50:	8b e0       	ldi	r24, 0x0B	; 11
     c52:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
	
	
	TCCR1A = 0b00000000; //habilita modo CTC do TC1
     c56:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B |= (1 << WGM12)|(1 << CS11); //liga TC0 com prescaler = 8
     c5a:	e1 e8       	ldi	r30, 0x81	; 129
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	80 81       	ld	r24, Z
     c60:	8a 60       	ori	r24, 0x0A	; 10
     c62:	80 83       	st	Z, r24
	TCNT1 = 0;
     c64:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     c68:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	
	OCR1A = 499 ;
     c6c:	23 ef       	ldi	r18, 0xF3	; 243
     c6e:	31 e0       	ldi	r19, 0x01	; 1
     c70:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     c74:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TIMSK1 = 0b00000010;
     c78:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	
	ADMUX = 0b01000000; //Tensão interna de ref (1.1V), canal 0
     c7c:	80 e4       	ldi	r24, 0x40	; 64
     c7e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = 0b11101111; //habilita o AD, habilita interrupção, modo de conversão contínua, prescaler = 128
     c82:	8f ee       	ldi	r24, 0xEF	; 239
     c84:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	ADCSRB = 0x00; //modo de conversão contínua
     c88:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
	DIDR0 = 0b00111110; //habilita pino PC0 como entrada do ADC0
     c8c:	8e e3       	ldi	r24, 0x3E	; 62
     c8e:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
	//PWM////////////////////////////////////////////////////////////////////////////////////
	TCCR0A = 0b10100011; //PWM não invertido nos pinos OC0A e OC0B
     c92:	83 ea       	ldi	r24, 0xA3	; 163
     c94:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b00000101; //liga TC0, prescaler = 1024, fpwm = f0sc/(256*prescaler) = 16MHz/(256*1024) = 61Hz
     c96:	85 e0       	ldi	r24, 0x05	; 5
     c98:	85 bd       	out	0x25, r24	; 37
	OCR0A = 0 ; //Start PWM 0C0A - duty = 0/256 = 0%
     c9a:	17 bc       	out	0x27, r1	; 39
	/////////////////////////////////////////////////////////////////////////////////////////
	//Configuração da USART
	UBRR0H = (unsigned char)(MYUBRR>>8);	//Ajusta a taxa de transmissão, parte alta
     c9c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)MYUBRR;		//Ajusta a taxa de transmissão, parte baixa
     ca0:	8f ef       	ldi	r24, 0xFF	; 255
     ca2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0); //Habilita a interrup. do receptor, Habilita o transmissor e o receptor
     ca6:	88 e9       	ldi	r24, 0x98	; 152
     ca8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (3<<UCSZ00); //Ajusta o formato do frame: 8 bits de dados e 1 de parada, paridade none
     cac:	86 e0       	ldi	r24, 0x06	; 6
     cae:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	/////////////////////////////////////////////////////////////////////////////////////////
	runTime = 0 ; 
     cb2:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <runTime+0x1>
     cb6:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <runTime>
	tempo_ms = 0 ;		//Conta quanto tempo em ms o programa está rodando
     cba:	10 92 44 03 	sts	0x0344, r1	; 0x800344 <tempo_ms+0x1>
     cbe:	10 92 43 03 	sts	0x0343, r1	; 0x800343 <tempo_ms>
	countGreen = 1;				//Inicializar o display e função de timer com 1s
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	90 93 35 03 	sts	0x0335, r25	; 0x800335 <countGreen+0x1>
     cca:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <countGreen>
	countYellow = 1;
     cce:	90 93 5f 03 	sts	0x035F, r25	; 0x80035f <countYellow+0x1>
     cd2:	80 93 5e 03 	sts	0x035E, r24	; 0x80035e <countYellow>
	countRed = 1;
     cd6:	90 93 4e 03 	sts	0x034E, r25	; 0x80034e <countRed+0x1>
     cda:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <countRed>
	colorTime = 0;
     cde:	10 92 48 03 	sts	0x0348, r1	; 0x800348 <colorTime+0x1>
     ce2:	10 92 47 03 	sts	0x0347, r1	; 0x800347 <colorTime>
	lightCounter = 0;
     ce6:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <lightCounter+0x1>
     cea:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <lightCounter>
	greenTimer = 1000 ;
     cee:	28 ee       	ldi	r18, 0xE8	; 232
     cf0:	33 e0       	ldi	r19, 0x03	; 3
     cf2:	30 93 37 03 	sts	0x0337, r19	; 0x800337 <greenTimer+0x1>
     cf6:	20 93 36 03 	sts	0x0336, r18	; 0x800336 <greenTimer>
	redTimer = 1000 ;
     cfa:	30 93 5d 03 	sts	0x035D, r19	; 0x80035d <redTimer+0x1>
     cfe:	20 93 5c 03 	sts	0x035C, r18	; 0x80035c <redTimer>
	yellowTimer = 4000 ;
     d02:	20 ea       	ldi	r18, 0xA0	; 160
     d04:	3f e0       	ldi	r19, 0x0F	; 15
     d06:	30 93 57 03 	sts	0x0357, r19	; 0x800357 <yellowTimer+0x1>
     d0a:	20 93 56 03 	sts	0x0356, r18	; 0x800356 <yellowTimer>
	State = GREEN ;
     d0e:	10 92 53 03 	sts	0x0353, r1	; 0x800353 <State>
	lightState = GREEN_STATE ;
     d12:	10 92 40 03 	sts	0x0340, r1	; 0x800340 <lightState>
	greenNumber = '1' ;
     d16:	21 e3       	ldi	r18, 0x31	; 49
     d18:	20 93 4b 03 	sts	0x034B, r18	; 0x80034b <greenNumber>
	yellowNumber = '1' ;
     d1c:	20 93 55 03 	sts	0x0355, r18	; 0x800355 <yellowNumber>
	redNumber = '1' ;
     d20:	20 93 38 03 	sts	0x0338, r18	; 0x800338 <redNumber>
	carCount = 0 ;
     d24:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <carCount+0x1>
     d28:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <carCount>
	carFreq = 0 ;
     d2c:	10 92 3f 03 	sts	0x033F, r1	; 0x80033f <carFreq+0x1>
     d30:	10 92 3e 03 	sts	0x033E, r1	; 0x80033e <carFreq>
	carFreqAux = 1 ;
     d34:	90 93 4a 03 	sts	0x034A, r25	; 0x80034a <carFreqAux+0x1>
     d38:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <carFreqAux>
	actualMode = MANUAL ;
     d3c:	10 92 54 03 	sts	0x0354, r1	; 0x800354 <actualMode>
	nextMode = AUTO ;
     d40:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <nextMode>
	/////////////////////////////////////////////////////////////////////////////////////////
	nokia_lcd_init();
     d44:	0e 94 cd 01 	call	0x39a	; 0x39a <nokia_lcd_init>
	reloadDisplay();
     d48:	0e 94 c2 05 	call	0xb84	; 0xb84 <reloadDisplay>
     d4c:	08 95       	ret

00000d4e <buttonMode>:
		countRed = countRed - 1 ;
	}
}

void buttonMode(){
	if ( PINB&(1<<PINB2) || PINB&(1<<PINB3)) {
     d4e:	1a 99       	sbic	0x03, 2	; 3
     d50:	02 c0       	rjmp	.+4      	; 0xd56 <buttonMode+0x8>
     d52:	1b 9b       	sbis	0x03, 3	; 3
     d54:	06 c0       	rjmp	.+12     	; 0xd62 <buttonMode+0x14>
		actualMode = nextMode ;
     d56:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <nextMode>
     d5a:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <actualMode>
		reloadDisplay();
     d5e:	0e 94 c2 05 	call	0xb84	; 0xb84 <reloadDisplay>
     d62:	08 95       	ret

00000d64 <USART_clock>:
		redTimer = 1000*autoRed ;
	}
}

void USART_clock(){
	PORTB |= 0b00000010 ;		//Subida Clock
     d64:	85 b1       	in	r24, 0x05	; 5
     d66:	82 60       	ori	r24, 0x02	; 2
     d68:	85 b9       	out	0x05, r24	; 5
	PORTB &= 0b11111101 ;		//Descida Clock
     d6a:	85 b1       	in	r24, 0x05	; 5
     d6c:	8d 7f       	andi	r24, 0xFD	; 253
     d6e:	85 b9       	out	0x05, r24	; 5
	while(!( UCSR0A & (1<<UDRE0)));//Espera a limpeza do registr. de transmissão
     d70:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     d74:	85 ff       	sbrs	r24, 5
     d76:	fc cf       	rjmp	.-8      	; 0xd70 <USART_clock+0xc>
	UDR0 = 1; //Coloca o dado no registrador e o envia
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	while(!( UCSR0A & (1<<UDRE0)));//Espera a limpeza do registr. de transmissão
     d7e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     d82:	85 ff       	sbrs	r24, 5
     d84:	fc cf       	rjmp	.-8      	; 0xd7e <USART_clock+0x1a>
	UDR0 = 0; //Coloca o dado no registrador e o envia
     d86:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     d8a:	08 95       	ret

00000d8c <__vector_1>:
}

ISR(INT0_vect){
     d8c:	1f 92       	push	r1
     d8e:	0f 92       	push	r0
     d90:	0f b6       	in	r0, 0x3f	; 63
     d92:	0f 92       	push	r0
     d94:	11 24       	eor	r1, r1
     d96:	2f 93       	push	r18
     d98:	3f 93       	push	r19
     d9a:	4f 93       	push	r20
     d9c:	5f 93       	push	r21
     d9e:	6f 93       	push	r22
     da0:	7f 93       	push	r23
     da2:	8f 93       	push	r24
     da4:	9f 93       	push	r25
     da6:	af 93       	push	r26
     da8:	bf 93       	push	r27
     daa:	ef 93       	push	r30
     dac:	ff 93       	push	r31
	//Por algum motivo as interrupções no INT0 causam um "ruído" na frequencia estimada de carros
	if(actualMode == MANUAL){//Caso o modo esteja no automativo desabilita a escolha de alterar valores
     dae:	80 91 54 03 	lds	r24, 0x0354	; 0x800354 <actualMode>
     db2:	81 11       	cpse	r24, r1
     db4:	1a c0       	rjmp	.+52     	; 0xdea <__vector_1+0x5e>
		if(PINB &(1<<PINB4)){
     db6:	1c 9b       	sbis	0x03, 4	; 3
     db8:	06 c0       	rjmp	.+12     	; 0xdc6 <__vector_1+0x3a>
			State = nextState;
     dba:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <nextState>
     dbe:	80 93 53 03 	sts	0x0353, r24	; 0x800353 <State>
			reloadDisplay();
     dc2:	0e 94 c2 05 	call	0xb84	; 0xb84 <reloadDisplay>
		}
		if(State==GREEN){
     dc6:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <State>
     dca:	81 11       	cpse	r24, r1
     dcc:	02 c0       	rjmp	.+4      	; 0xdd2 <__vector_1+0x46>
			buttonGreen();	
     dce:	0e 94 1c 03 	call	0x638	; 0x638 <buttonGreen>
		}
		if(State == YELLOW){
     dd2:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <State>
     dd6:	81 30       	cpi	r24, 0x01	; 1
     dd8:	11 f4       	brne	.+4      	; 0xdde <__vector_1+0x52>
			buttonYellow();
     dda:	0e 94 41 03 	call	0x682	; 0x682 <buttonYellow>
		}
		if(State == RED){
     dde:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <State>
     de2:	82 30       	cpi	r24, 0x02	; 2
     de4:	11 f4       	brne	.+4      	; 0xdea <__vector_1+0x5e>
			buttonRed();
     de6:	0e 94 80 03 	call	0x700	; 0x700 <buttonRed>
		}
	}
	if(State == MODE_SELECT){//Independente do modo poderá alternar entre automatico e manual
     dea:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <State>
     dee:	83 30       	cpi	r24, 0x03	; 3
     df0:	11 f4       	brne	.+4      	; 0xdf6 <__vector_1+0x6a>
		buttonMode();
     df2:	0e 94 a7 06 	call	0xd4e	; 0xd4e <buttonMode>
	}
	reloadDisplay();
     df6:	0e 94 c2 05 	call	0xb84	; 0xb84 <reloadDisplay>
}
     dfa:	ff 91       	pop	r31
     dfc:	ef 91       	pop	r30
     dfe:	bf 91       	pop	r27
     e00:	af 91       	pop	r26
     e02:	9f 91       	pop	r25
     e04:	8f 91       	pop	r24
     e06:	7f 91       	pop	r23
     e08:	6f 91       	pop	r22
     e0a:	5f 91       	pop	r21
     e0c:	4f 91       	pop	r20
     e0e:	3f 91       	pop	r19
     e10:	2f 91       	pop	r18
     e12:	0f 90       	pop	r0
     e14:	0f be       	out	0x3f, r0	; 63
     e16:	0f 90       	pop	r0
     e18:	1f 90       	pop	r1
     e1a:	18 95       	reti

00000e1c <__vector_21>:

ISR(ADC_vect){
     e1c:	1f 92       	push	r1
     e1e:	0f 92       	push	r0
     e20:	0f b6       	in	r0, 0x3f	; 63
     e22:	0f 92       	push	r0
     e24:	11 24       	eor	r1, r1
     e26:	8f 93       	push	r24
     e28:	9f 93       	push	r25
	luxRead = ADC;
     e2a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     e2e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     e32:	90 93 42 03 	sts	0x0342, r25	; 0x800342 <luxRead+0x1>
     e36:	80 93 41 03 	sts	0x0341, r24	; 0x800341 <luxRead>
}
     e3a:	9f 91       	pop	r25
     e3c:	8f 91       	pop	r24
     e3e:	0f 90       	pop	r0
     e40:	0f be       	out	0x3f, r0	; 63
     e42:	0f 90       	pop	r0
     e44:	1f 90       	pop	r1
     e46:	18 95       	reti

00000e48 <__vector_2>:

ISR(INT1_vect)
{
     e48:	1f 92       	push	r1
     e4a:	0f 92       	push	r0
     e4c:	0f b6       	in	r0, 0x3f	; 63
     e4e:	0f 92       	push	r0
     e50:	11 24       	eor	r1, r1
     e52:	8f 93       	push	r24
     e54:	9f 93       	push	r25
	if((PIND &(1<<PIND3)) == 0 ){//Para qualquer variação
     e56:	4b 99       	sbic	0x09, 3	; 9
     e58:	09 c0       	rjmp	.+18     	; 0xe6c <__vector_2+0x24>
		carCount = carCount + 1 ;//variar para 0 e contar = borda de descida
     e5a:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <carCount>
     e5e:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <carCount+0x1>
     e62:	01 96       	adiw	r24, 0x01	; 1
     e64:	90 93 50 03 	sts	0x0350, r25	; 0x800350 <carCount+0x1>
     e68:	80 93 4f 03 	sts	0x034F, r24	; 0x80034f <carCount>
	}
}
     e6c:	9f 91       	pop	r25
     e6e:	8f 91       	pop	r24
     e70:	0f 90       	pop	r0
     e72:	0f be       	out	0x3f, r0	; 63
     e74:	0f 90       	pop	r0
     e76:	1f 90       	pop	r1
     e78:	18 95       	reti

00000e7a <__vector_11>:

ISR(TIMER1_COMPA_vect) {
     e7a:	1f 92       	push	r1
     e7c:	0f 92       	push	r0
     e7e:	0f b6       	in	r0, 0x3f	; 63
     e80:	0f 92       	push	r0
     e82:	11 24       	eor	r1, r1
     e84:	2f 93       	push	r18
     e86:	3f 93       	push	r19
     e88:	4f 93       	push	r20
     e8a:	5f 93       	push	r21
     e8c:	6f 93       	push	r22
     e8e:	7f 93       	push	r23
     e90:	8f 93       	push	r24
     e92:	9f 93       	push	r25
     e94:	af 93       	push	r26
     e96:	bf 93       	push	r27
     e98:	ef 93       	push	r30
     e9a:	ff 93       	push	r31
	lightCounter += 1 ;
     e9c:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <lightCounter>
     ea0:	90 91 59 03 	lds	r25, 0x0359	; 0x800359 <lightCounter+0x1>
     ea4:	01 96       	adiw	r24, 0x01	; 1
     ea6:	90 93 59 03 	sts	0x0359, r25	; 0x800359 <lightCounter+0x1>
     eaa:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <lightCounter>
	runTime += 1 ;
     eae:	20 91 5a 03 	lds	r18, 0x035A	; 0x80035a <runTime>
     eb2:	30 91 5b 03 	lds	r19, 0x035B	; 0x80035b <runTime+0x1>
     eb6:	2f 5f       	subi	r18, 0xFF	; 255
     eb8:	3f 4f       	sbci	r19, 0xFF	; 255
     eba:	30 93 5b 03 	sts	0x035B, r19	; 0x80035b <runTime+0x1>
     ebe:	20 93 5a 03 	sts	0x035A, r18	; 0x80035a <runTime>
	if(lightCounter >= greenTimer && lightState == GREEN_STATE){
     ec2:	20 91 36 03 	lds	r18, 0x0336	; 0x800336 <greenTimer>
     ec6:	30 91 37 03 	lds	r19, 0x0337	; 0x800337 <greenTimer+0x1>
     eca:	82 17       	cp	r24, r18
     ecc:	93 07       	cpc	r25, r19
     ece:	e4 f0       	brlt	.+56     	; 0xf08 <__vector_11+0x8e>
     ed0:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <lightState>
     ed4:	81 11       	cpse	r24, r1
     ed6:	18 c0       	rjmp	.+48     	; 0xf08 <__vector_11+0x8e>
		USART_clock();
     ed8:	0e 94 b2 06 	call	0xd64	; 0xd64 <USART_clock>
		lightCounter = 0;
     edc:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <lightCounter+0x1>
     ee0:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <lightCounter>
		colorTime += 1 ;
     ee4:	80 91 47 03 	lds	r24, 0x0347	; 0x800347 <colorTime>
     ee8:	90 91 48 03 	lds	r25, 0x0348	; 0x800348 <colorTime+0x1>
     eec:	01 96       	adiw	r24, 0x01	; 1
     eee:	90 93 48 03 	sts	0x0348, r25	; 0x800348 <colorTime+0x1>
     ef2:	80 93 47 03 	sts	0x0347, r24	; 0x800347 <colorTime>
		if(colorTime == 4){
     ef6:	04 97       	sbiw	r24, 0x04	; 4
     ef8:	39 f4       	brne	.+14     	; 0xf08 <__vector_11+0x8e>
			lightState = YELLOW_STATE;
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <lightState>
			colorTime = 0 ;
     f00:	10 92 48 03 	sts	0x0348, r1	; 0x800348 <colorTime+0x1>
     f04:	10 92 47 03 	sts	0x0347, r1	; 0x800347 <colorTime>
		} 	
	}
	if(lightCounter >= yellowTimer && lightState == YELLOW_STATE){
     f08:	20 91 58 03 	lds	r18, 0x0358	; 0x800358 <lightCounter>
     f0c:	30 91 59 03 	lds	r19, 0x0359	; 0x800359 <lightCounter+0x1>
     f10:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <yellowTimer>
     f14:	90 91 57 03 	lds	r25, 0x0357	; 0x800357 <yellowTimer+0x1>
     f18:	28 17       	cp	r18, r24
     f1a:	39 07       	cpc	r19, r25
     f1c:	6c f0       	brlt	.+26     	; 0xf38 <__vector_11+0xbe>
     f1e:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <lightState>
     f22:	81 30       	cpi	r24, 0x01	; 1
     f24:	49 f4       	brne	.+18     	; 0xf38 <__vector_11+0xbe>
		USART_clock();
     f26:	0e 94 b2 06 	call	0xd64	; 0xd64 <USART_clock>
		lightCounter = 0;
     f2a:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <lightCounter+0x1>
     f2e:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <lightCounter>
		lightState = RED_STATE;
     f32:	82 e0       	ldi	r24, 0x02	; 2
     f34:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <lightState>
	}	
	if(lightCounter >= redTimer && lightState == RED_STATE){
     f38:	20 91 58 03 	lds	r18, 0x0358	; 0x800358 <lightCounter>
     f3c:	30 91 59 03 	lds	r19, 0x0359	; 0x800359 <lightCounter+0x1>
     f40:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <redTimer>
     f44:	90 91 5d 03 	lds	r25, 0x035D	; 0x80035d <redTimer+0x1>
     f48:	28 17       	cp	r18, r24
     f4a:	39 07       	cpc	r19, r25
     f4c:	dc f0       	brlt	.+54     	; 0xf84 <__vector_11+0x10a>
     f4e:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <lightState>
     f52:	82 30       	cpi	r24, 0x02	; 2
     f54:	b9 f4       	brne	.+46     	; 0xf84 <__vector_11+0x10a>
		USART_clock();
     f56:	0e 94 b2 06 	call	0xd64	; 0xd64 <USART_clock>
		lightCounter = 0;
     f5a:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <lightCounter+0x1>
     f5e:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <lightCounter>
		colorTime += 1 ;
     f62:	80 91 47 03 	lds	r24, 0x0347	; 0x800347 <colorTime>
     f66:	90 91 48 03 	lds	r25, 0x0348	; 0x800348 <colorTime+0x1>
     f6a:	01 96       	adiw	r24, 0x01	; 1
     f6c:	90 93 48 03 	sts	0x0348, r25	; 0x800348 <colorTime+0x1>
     f70:	80 93 47 03 	sts	0x0347, r24	; 0x800347 <colorTime>
		if(colorTime == 4){
     f74:	04 97       	sbiw	r24, 0x04	; 4
     f76:	31 f4       	brne	.+12     	; 0xf84 <__vector_11+0x10a>
			lightState = GREEN_STATE;
     f78:	10 92 40 03 	sts	0x0340, r1	; 0x800340 <lightState>
			colorTime = 0 ;
     f7c:	10 92 48 03 	sts	0x0348, r1	; 0x800348 <colorTime+0x1>
     f80:	10 92 47 03 	sts	0x0347, r1	; 0x800347 <colorTime>
		}
	}
	if(runTime == 4){
     f84:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <runTime>
     f88:	90 91 5b 03 	lds	r25, 0x035B	; 0x80035b <runTime+0x1>
     f8c:	04 97       	sbiw	r24, 0x04	; 4
     f8e:	69 f4       	brne	.+26     	; 0xfaa <__vector_11+0x130>
		tempo_ms += 1 ;//Contagem de tempo em ms
     f90:	80 91 43 03 	lds	r24, 0x0343	; 0x800343 <tempo_ms>
     f94:	90 91 44 03 	lds	r25, 0x0344	; 0x800344 <tempo_ms+0x1>
     f98:	01 96       	adiw	r24, 0x01	; 1
     f9a:	90 93 44 03 	sts	0x0344, r25	; 0x800344 <tempo_ms+0x1>
     f9e:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <tempo_ms>
		runTime = 0 ;
     fa2:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <runTime+0x1>
     fa6:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <runTime>
	}
     faa:	ff 91       	pop	r31
     fac:	ef 91       	pop	r30
     fae:	bf 91       	pop	r27
     fb0:	af 91       	pop	r26
     fb2:	9f 91       	pop	r25
     fb4:	8f 91       	pop	r24
     fb6:	7f 91       	pop	r23
     fb8:	6f 91       	pop	r22
     fba:	5f 91       	pop	r21
     fbc:	4f 91       	pop	r20
     fbe:	3f 91       	pop	r19
     fc0:	2f 91       	pop	r18
     fc2:	0f 90       	pop	r0
     fc4:	0f be       	out	0x3f, r0	; 63
     fc6:	0f 90       	pop	r0
     fc8:	1f 90       	pop	r1
     fca:	18 95       	reti

00000fcc <__udivmodqi4>:
     fcc:	99 1b       	sub	r25, r25
     fce:	79 e0       	ldi	r23, 0x09	; 9
     fd0:	04 c0       	rjmp	.+8      	; 0xfda <__udivmodqi4_ep>

00000fd2 <__udivmodqi4_loop>:
     fd2:	99 1f       	adc	r25, r25
     fd4:	96 17       	cp	r25, r22
     fd6:	08 f0       	brcs	.+2      	; 0xfda <__udivmodqi4_ep>
     fd8:	96 1b       	sub	r25, r22

00000fda <__udivmodqi4_ep>:
     fda:	88 1f       	adc	r24, r24
     fdc:	7a 95       	dec	r23
     fde:	c9 f7       	brne	.-14     	; 0xfd2 <__udivmodqi4_loop>
     fe0:	80 95       	com	r24
     fe2:	08 95       	ret

00000fe4 <__divmodhi4>:
     fe4:	97 fb       	bst	r25, 7
     fe6:	07 2e       	mov	r0, r23
     fe8:	16 f4       	brtc	.+4      	; 0xfee <__divmodhi4+0xa>
     fea:	00 94       	com	r0
     fec:	07 d0       	rcall	.+14     	; 0xffc <__divmodhi4_neg1>
     fee:	77 fd       	sbrc	r23, 7
     ff0:	09 d0       	rcall	.+18     	; 0x1004 <__divmodhi4_neg2>
     ff2:	0e 94 06 08 	call	0x100c	; 0x100c <__udivmodhi4>
     ff6:	07 fc       	sbrc	r0, 7
     ff8:	05 d0       	rcall	.+10     	; 0x1004 <__divmodhi4_neg2>
     ffa:	3e f4       	brtc	.+14     	; 0x100a <__divmodhi4_exit>

00000ffc <__divmodhi4_neg1>:
     ffc:	90 95       	com	r25
     ffe:	81 95       	neg	r24
    1000:	9f 4f       	sbci	r25, 0xFF	; 255
    1002:	08 95       	ret

00001004 <__divmodhi4_neg2>:
    1004:	70 95       	com	r23
    1006:	61 95       	neg	r22
    1008:	7f 4f       	sbci	r23, 0xFF	; 255

0000100a <__divmodhi4_exit>:
    100a:	08 95       	ret

0000100c <__udivmodhi4>:
    100c:	aa 1b       	sub	r26, r26
    100e:	bb 1b       	sub	r27, r27
    1010:	51 e1       	ldi	r21, 0x11	; 17
    1012:	07 c0       	rjmp	.+14     	; 0x1022 <__udivmodhi4_ep>

00001014 <__udivmodhi4_loop>:
    1014:	aa 1f       	adc	r26, r26
    1016:	bb 1f       	adc	r27, r27
    1018:	a6 17       	cp	r26, r22
    101a:	b7 07       	cpc	r27, r23
    101c:	10 f0       	brcs	.+4      	; 0x1022 <__udivmodhi4_ep>
    101e:	a6 1b       	sub	r26, r22
    1020:	b7 0b       	sbc	r27, r23

00001022 <__udivmodhi4_ep>:
    1022:	88 1f       	adc	r24, r24
    1024:	99 1f       	adc	r25, r25
    1026:	5a 95       	dec	r21
    1028:	a9 f7       	brne	.-22     	; 0x1014 <__udivmodhi4_loop>
    102a:	80 95       	com	r24
    102c:	90 95       	com	r25
    102e:	bc 01       	movw	r22, r24
    1030:	cd 01       	movw	r24, r26
    1032:	08 95       	ret

00001034 <sprintf>:
    1034:	ae e0       	ldi	r26, 0x0E	; 14
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	e0 e2       	ldi	r30, 0x20	; 32
    103a:	f8 e0       	ldi	r31, 0x08	; 8
    103c:	0c 94 db 0a 	jmp	0x15b6	; 0x15b6 <__prologue_saves__+0x1c>
    1040:	0d 89       	ldd	r16, Y+21	; 0x15
    1042:	1e 89       	ldd	r17, Y+22	; 0x16
    1044:	86 e0       	ldi	r24, 0x06	; 6
    1046:	8c 83       	std	Y+4, r24	; 0x04
    1048:	1a 83       	std	Y+2, r17	; 0x02
    104a:	09 83       	std	Y+1, r16	; 0x01
    104c:	8f ef       	ldi	r24, 0xFF	; 255
    104e:	9f e7       	ldi	r25, 0x7F	; 127
    1050:	9e 83       	std	Y+6, r25	; 0x06
    1052:	8d 83       	std	Y+5, r24	; 0x05
    1054:	ae 01       	movw	r20, r28
    1056:	47 5e       	subi	r20, 0xE7	; 231
    1058:	5f 4f       	sbci	r21, 0xFF	; 255
    105a:	6f 89       	ldd	r22, Y+23	; 0x17
    105c:	78 8d       	ldd	r23, Y+24	; 0x18
    105e:	ce 01       	movw	r24, r28
    1060:	01 96       	adiw	r24, 0x01	; 1
    1062:	0e 94 3c 08 	call	0x1078	; 0x1078 <vfprintf>
    1066:	ef 81       	ldd	r30, Y+7	; 0x07
    1068:	f8 85       	ldd	r31, Y+8	; 0x08
    106a:	e0 0f       	add	r30, r16
    106c:	f1 1f       	adc	r31, r17
    106e:	10 82       	st	Z, r1
    1070:	2e 96       	adiw	r28, 0x0e	; 14
    1072:	e4 e0       	ldi	r30, 0x04	; 4
    1074:	0c 94 f7 0a 	jmp	0x15ee	; 0x15ee <__epilogue_restores__+0x1c>

00001078 <vfprintf>:
    1078:	ab e0       	ldi	r26, 0x0B	; 11
    107a:	b0 e0       	ldi	r27, 0x00	; 0
    107c:	e2 e4       	ldi	r30, 0x42	; 66
    107e:	f8 e0       	ldi	r31, 0x08	; 8
    1080:	0c 94 cd 0a 	jmp	0x159a	; 0x159a <__prologue_saves__>
    1084:	6c 01       	movw	r12, r24
    1086:	7b 01       	movw	r14, r22
    1088:	8a 01       	movw	r16, r20
    108a:	fc 01       	movw	r30, r24
    108c:	17 82       	std	Z+7, r1	; 0x07
    108e:	16 82       	std	Z+6, r1	; 0x06
    1090:	83 81       	ldd	r24, Z+3	; 0x03
    1092:	81 ff       	sbrs	r24, 1
    1094:	cc c1       	rjmp	.+920    	; 0x142e <vfprintf+0x3b6>
    1096:	ce 01       	movw	r24, r28
    1098:	01 96       	adiw	r24, 0x01	; 1
    109a:	3c 01       	movw	r6, r24
    109c:	f6 01       	movw	r30, r12
    109e:	93 81       	ldd	r25, Z+3	; 0x03
    10a0:	f7 01       	movw	r30, r14
    10a2:	93 fd       	sbrc	r25, 3
    10a4:	85 91       	lpm	r24, Z+
    10a6:	93 ff       	sbrs	r25, 3
    10a8:	81 91       	ld	r24, Z+
    10aa:	7f 01       	movw	r14, r30
    10ac:	88 23       	and	r24, r24
    10ae:	09 f4       	brne	.+2      	; 0x10b2 <vfprintf+0x3a>
    10b0:	ba c1       	rjmp	.+884    	; 0x1426 <vfprintf+0x3ae>
    10b2:	85 32       	cpi	r24, 0x25	; 37
    10b4:	39 f4       	brne	.+14     	; 0x10c4 <vfprintf+0x4c>
    10b6:	93 fd       	sbrc	r25, 3
    10b8:	85 91       	lpm	r24, Z+
    10ba:	93 ff       	sbrs	r25, 3
    10bc:	81 91       	ld	r24, Z+
    10be:	7f 01       	movw	r14, r30
    10c0:	85 32       	cpi	r24, 0x25	; 37
    10c2:	29 f4       	brne	.+10     	; 0x10ce <vfprintf+0x56>
    10c4:	b6 01       	movw	r22, r12
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	0e 94 33 0a 	call	0x1466	; 0x1466 <fputc>
    10cc:	e7 cf       	rjmp	.-50     	; 0x109c <vfprintf+0x24>
    10ce:	91 2c       	mov	r9, r1
    10d0:	21 2c       	mov	r2, r1
    10d2:	31 2c       	mov	r3, r1
    10d4:	ff e1       	ldi	r31, 0x1F	; 31
    10d6:	f3 15       	cp	r31, r3
    10d8:	d8 f0       	brcs	.+54     	; 0x1110 <vfprintf+0x98>
    10da:	8b 32       	cpi	r24, 0x2B	; 43
    10dc:	79 f0       	breq	.+30     	; 0x10fc <vfprintf+0x84>
    10de:	38 f4       	brcc	.+14     	; 0x10ee <vfprintf+0x76>
    10e0:	80 32       	cpi	r24, 0x20	; 32
    10e2:	79 f0       	breq	.+30     	; 0x1102 <vfprintf+0x8a>
    10e4:	83 32       	cpi	r24, 0x23	; 35
    10e6:	a1 f4       	brne	.+40     	; 0x1110 <vfprintf+0x98>
    10e8:	23 2d       	mov	r18, r3
    10ea:	20 61       	ori	r18, 0x10	; 16
    10ec:	1d c0       	rjmp	.+58     	; 0x1128 <vfprintf+0xb0>
    10ee:	8d 32       	cpi	r24, 0x2D	; 45
    10f0:	61 f0       	breq	.+24     	; 0x110a <vfprintf+0x92>
    10f2:	80 33       	cpi	r24, 0x30	; 48
    10f4:	69 f4       	brne	.+26     	; 0x1110 <vfprintf+0x98>
    10f6:	23 2d       	mov	r18, r3
    10f8:	21 60       	ori	r18, 0x01	; 1
    10fa:	16 c0       	rjmp	.+44     	; 0x1128 <vfprintf+0xb0>
    10fc:	83 2d       	mov	r24, r3
    10fe:	82 60       	ori	r24, 0x02	; 2
    1100:	38 2e       	mov	r3, r24
    1102:	e3 2d       	mov	r30, r3
    1104:	e4 60       	ori	r30, 0x04	; 4
    1106:	3e 2e       	mov	r3, r30
    1108:	2a c0       	rjmp	.+84     	; 0x115e <vfprintf+0xe6>
    110a:	f3 2d       	mov	r31, r3
    110c:	f8 60       	ori	r31, 0x08	; 8
    110e:	1d c0       	rjmp	.+58     	; 0x114a <vfprintf+0xd2>
    1110:	37 fc       	sbrc	r3, 7
    1112:	2d c0       	rjmp	.+90     	; 0x116e <vfprintf+0xf6>
    1114:	20 ed       	ldi	r18, 0xD0	; 208
    1116:	28 0f       	add	r18, r24
    1118:	2a 30       	cpi	r18, 0x0A	; 10
    111a:	40 f0       	brcs	.+16     	; 0x112c <vfprintf+0xb4>
    111c:	8e 32       	cpi	r24, 0x2E	; 46
    111e:	b9 f4       	brne	.+46     	; 0x114e <vfprintf+0xd6>
    1120:	36 fc       	sbrc	r3, 6
    1122:	81 c1       	rjmp	.+770    	; 0x1426 <vfprintf+0x3ae>
    1124:	23 2d       	mov	r18, r3
    1126:	20 64       	ori	r18, 0x40	; 64
    1128:	32 2e       	mov	r3, r18
    112a:	19 c0       	rjmp	.+50     	; 0x115e <vfprintf+0xe6>
    112c:	36 fe       	sbrs	r3, 6
    112e:	06 c0       	rjmp	.+12     	; 0x113c <vfprintf+0xc4>
    1130:	8a e0       	ldi	r24, 0x0A	; 10
    1132:	98 9e       	mul	r9, r24
    1134:	20 0d       	add	r18, r0
    1136:	11 24       	eor	r1, r1
    1138:	92 2e       	mov	r9, r18
    113a:	11 c0       	rjmp	.+34     	; 0x115e <vfprintf+0xe6>
    113c:	ea e0       	ldi	r30, 0x0A	; 10
    113e:	2e 9e       	mul	r2, r30
    1140:	20 0d       	add	r18, r0
    1142:	11 24       	eor	r1, r1
    1144:	22 2e       	mov	r2, r18
    1146:	f3 2d       	mov	r31, r3
    1148:	f0 62       	ori	r31, 0x20	; 32
    114a:	3f 2e       	mov	r3, r31
    114c:	08 c0       	rjmp	.+16     	; 0x115e <vfprintf+0xe6>
    114e:	8c 36       	cpi	r24, 0x6C	; 108
    1150:	21 f4       	brne	.+8      	; 0x115a <vfprintf+0xe2>
    1152:	83 2d       	mov	r24, r3
    1154:	80 68       	ori	r24, 0x80	; 128
    1156:	38 2e       	mov	r3, r24
    1158:	02 c0       	rjmp	.+4      	; 0x115e <vfprintf+0xe6>
    115a:	88 36       	cpi	r24, 0x68	; 104
    115c:	41 f4       	brne	.+16     	; 0x116e <vfprintf+0xf6>
    115e:	f7 01       	movw	r30, r14
    1160:	93 fd       	sbrc	r25, 3
    1162:	85 91       	lpm	r24, Z+
    1164:	93 ff       	sbrs	r25, 3
    1166:	81 91       	ld	r24, Z+
    1168:	7f 01       	movw	r14, r30
    116a:	81 11       	cpse	r24, r1
    116c:	b3 cf       	rjmp	.-154    	; 0x10d4 <vfprintf+0x5c>
    116e:	98 2f       	mov	r25, r24
    1170:	9f 7d       	andi	r25, 0xDF	; 223
    1172:	95 54       	subi	r25, 0x45	; 69
    1174:	93 30       	cpi	r25, 0x03	; 3
    1176:	28 f4       	brcc	.+10     	; 0x1182 <vfprintf+0x10a>
    1178:	0c 5f       	subi	r16, 0xFC	; 252
    117a:	1f 4f       	sbci	r17, 0xFF	; 255
    117c:	9f e3       	ldi	r25, 0x3F	; 63
    117e:	99 83       	std	Y+1, r25	; 0x01
    1180:	0d c0       	rjmp	.+26     	; 0x119c <vfprintf+0x124>
    1182:	83 36       	cpi	r24, 0x63	; 99
    1184:	31 f0       	breq	.+12     	; 0x1192 <vfprintf+0x11a>
    1186:	83 37       	cpi	r24, 0x73	; 115
    1188:	71 f0       	breq	.+28     	; 0x11a6 <vfprintf+0x12e>
    118a:	83 35       	cpi	r24, 0x53	; 83
    118c:	09 f0       	breq	.+2      	; 0x1190 <vfprintf+0x118>
    118e:	59 c0       	rjmp	.+178    	; 0x1242 <vfprintf+0x1ca>
    1190:	21 c0       	rjmp	.+66     	; 0x11d4 <vfprintf+0x15c>
    1192:	f8 01       	movw	r30, r16
    1194:	80 81       	ld	r24, Z
    1196:	89 83       	std	Y+1, r24	; 0x01
    1198:	0e 5f       	subi	r16, 0xFE	; 254
    119a:	1f 4f       	sbci	r17, 0xFF	; 255
    119c:	88 24       	eor	r8, r8
    119e:	83 94       	inc	r8
    11a0:	91 2c       	mov	r9, r1
    11a2:	53 01       	movw	r10, r6
    11a4:	13 c0       	rjmp	.+38     	; 0x11cc <vfprintf+0x154>
    11a6:	28 01       	movw	r4, r16
    11a8:	f2 e0       	ldi	r31, 0x02	; 2
    11aa:	4f 0e       	add	r4, r31
    11ac:	51 1c       	adc	r5, r1
    11ae:	f8 01       	movw	r30, r16
    11b0:	a0 80       	ld	r10, Z
    11b2:	b1 80       	ldd	r11, Z+1	; 0x01
    11b4:	36 fe       	sbrs	r3, 6
    11b6:	03 c0       	rjmp	.+6      	; 0x11be <vfprintf+0x146>
    11b8:	69 2d       	mov	r22, r9
    11ba:	70 e0       	ldi	r23, 0x00	; 0
    11bc:	02 c0       	rjmp	.+4      	; 0x11c2 <vfprintf+0x14a>
    11be:	6f ef       	ldi	r22, 0xFF	; 255
    11c0:	7f ef       	ldi	r23, 0xFF	; 255
    11c2:	c5 01       	movw	r24, r10
    11c4:	0e 94 28 0a 	call	0x1450	; 0x1450 <strnlen>
    11c8:	4c 01       	movw	r8, r24
    11ca:	82 01       	movw	r16, r4
    11cc:	f3 2d       	mov	r31, r3
    11ce:	ff 77       	andi	r31, 0x7F	; 127
    11d0:	3f 2e       	mov	r3, r31
    11d2:	16 c0       	rjmp	.+44     	; 0x1200 <vfprintf+0x188>
    11d4:	28 01       	movw	r4, r16
    11d6:	22 e0       	ldi	r18, 0x02	; 2
    11d8:	42 0e       	add	r4, r18
    11da:	51 1c       	adc	r5, r1
    11dc:	f8 01       	movw	r30, r16
    11de:	a0 80       	ld	r10, Z
    11e0:	b1 80       	ldd	r11, Z+1	; 0x01
    11e2:	36 fe       	sbrs	r3, 6
    11e4:	03 c0       	rjmp	.+6      	; 0x11ec <vfprintf+0x174>
    11e6:	69 2d       	mov	r22, r9
    11e8:	70 e0       	ldi	r23, 0x00	; 0
    11ea:	02 c0       	rjmp	.+4      	; 0x11f0 <vfprintf+0x178>
    11ec:	6f ef       	ldi	r22, 0xFF	; 255
    11ee:	7f ef       	ldi	r23, 0xFF	; 255
    11f0:	c5 01       	movw	r24, r10
    11f2:	0e 94 1d 0a 	call	0x143a	; 0x143a <strnlen_P>
    11f6:	4c 01       	movw	r8, r24
    11f8:	f3 2d       	mov	r31, r3
    11fa:	f0 68       	ori	r31, 0x80	; 128
    11fc:	3f 2e       	mov	r3, r31
    11fe:	82 01       	movw	r16, r4
    1200:	33 fc       	sbrc	r3, 3
    1202:	1b c0       	rjmp	.+54     	; 0x123a <vfprintf+0x1c2>
    1204:	82 2d       	mov	r24, r2
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	88 16       	cp	r8, r24
    120a:	99 06       	cpc	r9, r25
    120c:	b0 f4       	brcc	.+44     	; 0x123a <vfprintf+0x1c2>
    120e:	b6 01       	movw	r22, r12
    1210:	80 e2       	ldi	r24, 0x20	; 32
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	0e 94 33 0a 	call	0x1466	; 0x1466 <fputc>
    1218:	2a 94       	dec	r2
    121a:	f4 cf       	rjmp	.-24     	; 0x1204 <vfprintf+0x18c>
    121c:	f5 01       	movw	r30, r10
    121e:	37 fc       	sbrc	r3, 7
    1220:	85 91       	lpm	r24, Z+
    1222:	37 fe       	sbrs	r3, 7
    1224:	81 91       	ld	r24, Z+
    1226:	5f 01       	movw	r10, r30
    1228:	b6 01       	movw	r22, r12
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	0e 94 33 0a 	call	0x1466	; 0x1466 <fputc>
    1230:	21 10       	cpse	r2, r1
    1232:	2a 94       	dec	r2
    1234:	21 e0       	ldi	r18, 0x01	; 1
    1236:	82 1a       	sub	r8, r18
    1238:	91 08       	sbc	r9, r1
    123a:	81 14       	cp	r8, r1
    123c:	91 04       	cpc	r9, r1
    123e:	71 f7       	brne	.-36     	; 0x121c <vfprintf+0x1a4>
    1240:	e8 c0       	rjmp	.+464    	; 0x1412 <vfprintf+0x39a>
    1242:	84 36       	cpi	r24, 0x64	; 100
    1244:	11 f0       	breq	.+4      	; 0x124a <vfprintf+0x1d2>
    1246:	89 36       	cpi	r24, 0x69	; 105
    1248:	41 f5       	brne	.+80     	; 0x129a <vfprintf+0x222>
    124a:	f8 01       	movw	r30, r16
    124c:	37 fe       	sbrs	r3, 7
    124e:	07 c0       	rjmp	.+14     	; 0x125e <vfprintf+0x1e6>
    1250:	60 81       	ld	r22, Z
    1252:	71 81       	ldd	r23, Z+1	; 0x01
    1254:	82 81       	ldd	r24, Z+2	; 0x02
    1256:	93 81       	ldd	r25, Z+3	; 0x03
    1258:	0c 5f       	subi	r16, 0xFC	; 252
    125a:	1f 4f       	sbci	r17, 0xFF	; 255
    125c:	08 c0       	rjmp	.+16     	; 0x126e <vfprintf+0x1f6>
    125e:	60 81       	ld	r22, Z
    1260:	71 81       	ldd	r23, Z+1	; 0x01
    1262:	07 2e       	mov	r0, r23
    1264:	00 0c       	add	r0, r0
    1266:	88 0b       	sbc	r24, r24
    1268:	99 0b       	sbc	r25, r25
    126a:	0e 5f       	subi	r16, 0xFE	; 254
    126c:	1f 4f       	sbci	r17, 0xFF	; 255
    126e:	f3 2d       	mov	r31, r3
    1270:	ff 76       	andi	r31, 0x6F	; 111
    1272:	3f 2e       	mov	r3, r31
    1274:	97 ff       	sbrs	r25, 7
    1276:	09 c0       	rjmp	.+18     	; 0x128a <vfprintf+0x212>
    1278:	90 95       	com	r25
    127a:	80 95       	com	r24
    127c:	70 95       	com	r23
    127e:	61 95       	neg	r22
    1280:	7f 4f       	sbci	r23, 0xFF	; 255
    1282:	8f 4f       	sbci	r24, 0xFF	; 255
    1284:	9f 4f       	sbci	r25, 0xFF	; 255
    1286:	f0 68       	ori	r31, 0x80	; 128
    1288:	3f 2e       	mov	r3, r31
    128a:	2a e0       	ldi	r18, 0x0A	; 10
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	a3 01       	movw	r20, r6
    1290:	0e 94 6f 0a 	call	0x14de	; 0x14de <__ultoa_invert>
    1294:	88 2e       	mov	r8, r24
    1296:	86 18       	sub	r8, r6
    1298:	45 c0       	rjmp	.+138    	; 0x1324 <vfprintf+0x2ac>
    129a:	85 37       	cpi	r24, 0x75	; 117
    129c:	31 f4       	brne	.+12     	; 0x12aa <vfprintf+0x232>
    129e:	23 2d       	mov	r18, r3
    12a0:	2f 7e       	andi	r18, 0xEF	; 239
    12a2:	b2 2e       	mov	r11, r18
    12a4:	2a e0       	ldi	r18, 0x0A	; 10
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	25 c0       	rjmp	.+74     	; 0x12f4 <vfprintf+0x27c>
    12aa:	93 2d       	mov	r25, r3
    12ac:	99 7f       	andi	r25, 0xF9	; 249
    12ae:	b9 2e       	mov	r11, r25
    12b0:	8f 36       	cpi	r24, 0x6F	; 111
    12b2:	c1 f0       	breq	.+48     	; 0x12e4 <vfprintf+0x26c>
    12b4:	18 f4       	brcc	.+6      	; 0x12bc <vfprintf+0x244>
    12b6:	88 35       	cpi	r24, 0x58	; 88
    12b8:	79 f0       	breq	.+30     	; 0x12d8 <vfprintf+0x260>
    12ba:	b5 c0       	rjmp	.+362    	; 0x1426 <vfprintf+0x3ae>
    12bc:	80 37       	cpi	r24, 0x70	; 112
    12be:	19 f0       	breq	.+6      	; 0x12c6 <vfprintf+0x24e>
    12c0:	88 37       	cpi	r24, 0x78	; 120
    12c2:	21 f0       	breq	.+8      	; 0x12cc <vfprintf+0x254>
    12c4:	b0 c0       	rjmp	.+352    	; 0x1426 <vfprintf+0x3ae>
    12c6:	e9 2f       	mov	r30, r25
    12c8:	e0 61       	ori	r30, 0x10	; 16
    12ca:	be 2e       	mov	r11, r30
    12cc:	b4 fe       	sbrs	r11, 4
    12ce:	0d c0       	rjmp	.+26     	; 0x12ea <vfprintf+0x272>
    12d0:	fb 2d       	mov	r31, r11
    12d2:	f4 60       	ori	r31, 0x04	; 4
    12d4:	bf 2e       	mov	r11, r31
    12d6:	09 c0       	rjmp	.+18     	; 0x12ea <vfprintf+0x272>
    12d8:	34 fe       	sbrs	r3, 4
    12da:	0a c0       	rjmp	.+20     	; 0x12f0 <vfprintf+0x278>
    12dc:	29 2f       	mov	r18, r25
    12de:	26 60       	ori	r18, 0x06	; 6
    12e0:	b2 2e       	mov	r11, r18
    12e2:	06 c0       	rjmp	.+12     	; 0x12f0 <vfprintf+0x278>
    12e4:	28 e0       	ldi	r18, 0x08	; 8
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	05 c0       	rjmp	.+10     	; 0x12f4 <vfprintf+0x27c>
    12ea:	20 e1       	ldi	r18, 0x10	; 16
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	02 c0       	rjmp	.+4      	; 0x12f4 <vfprintf+0x27c>
    12f0:	20 e1       	ldi	r18, 0x10	; 16
    12f2:	32 e0       	ldi	r19, 0x02	; 2
    12f4:	f8 01       	movw	r30, r16
    12f6:	b7 fe       	sbrs	r11, 7
    12f8:	07 c0       	rjmp	.+14     	; 0x1308 <vfprintf+0x290>
    12fa:	60 81       	ld	r22, Z
    12fc:	71 81       	ldd	r23, Z+1	; 0x01
    12fe:	82 81       	ldd	r24, Z+2	; 0x02
    1300:	93 81       	ldd	r25, Z+3	; 0x03
    1302:	0c 5f       	subi	r16, 0xFC	; 252
    1304:	1f 4f       	sbci	r17, 0xFF	; 255
    1306:	06 c0       	rjmp	.+12     	; 0x1314 <vfprintf+0x29c>
    1308:	60 81       	ld	r22, Z
    130a:	71 81       	ldd	r23, Z+1	; 0x01
    130c:	80 e0       	ldi	r24, 0x00	; 0
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	0e 5f       	subi	r16, 0xFE	; 254
    1312:	1f 4f       	sbci	r17, 0xFF	; 255
    1314:	a3 01       	movw	r20, r6
    1316:	0e 94 6f 0a 	call	0x14de	; 0x14de <__ultoa_invert>
    131a:	88 2e       	mov	r8, r24
    131c:	86 18       	sub	r8, r6
    131e:	fb 2d       	mov	r31, r11
    1320:	ff 77       	andi	r31, 0x7F	; 127
    1322:	3f 2e       	mov	r3, r31
    1324:	36 fe       	sbrs	r3, 6
    1326:	0d c0       	rjmp	.+26     	; 0x1342 <vfprintf+0x2ca>
    1328:	23 2d       	mov	r18, r3
    132a:	2e 7f       	andi	r18, 0xFE	; 254
    132c:	a2 2e       	mov	r10, r18
    132e:	89 14       	cp	r8, r9
    1330:	58 f4       	brcc	.+22     	; 0x1348 <vfprintf+0x2d0>
    1332:	34 fe       	sbrs	r3, 4
    1334:	0b c0       	rjmp	.+22     	; 0x134c <vfprintf+0x2d4>
    1336:	32 fc       	sbrc	r3, 2
    1338:	09 c0       	rjmp	.+18     	; 0x134c <vfprintf+0x2d4>
    133a:	83 2d       	mov	r24, r3
    133c:	8e 7e       	andi	r24, 0xEE	; 238
    133e:	a8 2e       	mov	r10, r24
    1340:	05 c0       	rjmp	.+10     	; 0x134c <vfprintf+0x2d4>
    1342:	b8 2c       	mov	r11, r8
    1344:	a3 2c       	mov	r10, r3
    1346:	03 c0       	rjmp	.+6      	; 0x134e <vfprintf+0x2d6>
    1348:	b8 2c       	mov	r11, r8
    134a:	01 c0       	rjmp	.+2      	; 0x134e <vfprintf+0x2d6>
    134c:	b9 2c       	mov	r11, r9
    134e:	a4 fe       	sbrs	r10, 4
    1350:	0f c0       	rjmp	.+30     	; 0x1370 <vfprintf+0x2f8>
    1352:	fe 01       	movw	r30, r28
    1354:	e8 0d       	add	r30, r8
    1356:	f1 1d       	adc	r31, r1
    1358:	80 81       	ld	r24, Z
    135a:	80 33       	cpi	r24, 0x30	; 48
    135c:	21 f4       	brne	.+8      	; 0x1366 <vfprintf+0x2ee>
    135e:	9a 2d       	mov	r25, r10
    1360:	99 7e       	andi	r25, 0xE9	; 233
    1362:	a9 2e       	mov	r10, r25
    1364:	09 c0       	rjmp	.+18     	; 0x1378 <vfprintf+0x300>
    1366:	a2 fe       	sbrs	r10, 2
    1368:	06 c0       	rjmp	.+12     	; 0x1376 <vfprintf+0x2fe>
    136a:	b3 94       	inc	r11
    136c:	b3 94       	inc	r11
    136e:	04 c0       	rjmp	.+8      	; 0x1378 <vfprintf+0x300>
    1370:	8a 2d       	mov	r24, r10
    1372:	86 78       	andi	r24, 0x86	; 134
    1374:	09 f0       	breq	.+2      	; 0x1378 <vfprintf+0x300>
    1376:	b3 94       	inc	r11
    1378:	a3 fc       	sbrc	r10, 3
    137a:	11 c0       	rjmp	.+34     	; 0x139e <vfprintf+0x326>
    137c:	a0 fe       	sbrs	r10, 0
    137e:	06 c0       	rjmp	.+12     	; 0x138c <vfprintf+0x314>
    1380:	b2 14       	cp	r11, r2
    1382:	88 f4       	brcc	.+34     	; 0x13a6 <vfprintf+0x32e>
    1384:	28 0c       	add	r2, r8
    1386:	92 2c       	mov	r9, r2
    1388:	9b 18       	sub	r9, r11
    138a:	0e c0       	rjmp	.+28     	; 0x13a8 <vfprintf+0x330>
    138c:	b2 14       	cp	r11, r2
    138e:	60 f4       	brcc	.+24     	; 0x13a8 <vfprintf+0x330>
    1390:	b6 01       	movw	r22, r12
    1392:	80 e2       	ldi	r24, 0x20	; 32
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	0e 94 33 0a 	call	0x1466	; 0x1466 <fputc>
    139a:	b3 94       	inc	r11
    139c:	f7 cf       	rjmp	.-18     	; 0x138c <vfprintf+0x314>
    139e:	b2 14       	cp	r11, r2
    13a0:	18 f4       	brcc	.+6      	; 0x13a8 <vfprintf+0x330>
    13a2:	2b 18       	sub	r2, r11
    13a4:	02 c0       	rjmp	.+4      	; 0x13aa <vfprintf+0x332>
    13a6:	98 2c       	mov	r9, r8
    13a8:	21 2c       	mov	r2, r1
    13aa:	a4 fe       	sbrs	r10, 4
    13ac:	10 c0       	rjmp	.+32     	; 0x13ce <vfprintf+0x356>
    13ae:	b6 01       	movw	r22, r12
    13b0:	80 e3       	ldi	r24, 0x30	; 48
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	0e 94 33 0a 	call	0x1466	; 0x1466 <fputc>
    13b8:	a2 fe       	sbrs	r10, 2
    13ba:	17 c0       	rjmp	.+46     	; 0x13ea <vfprintf+0x372>
    13bc:	a1 fc       	sbrc	r10, 1
    13be:	03 c0       	rjmp	.+6      	; 0x13c6 <vfprintf+0x34e>
    13c0:	88 e7       	ldi	r24, 0x78	; 120
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	02 c0       	rjmp	.+4      	; 0x13ca <vfprintf+0x352>
    13c6:	88 e5       	ldi	r24, 0x58	; 88
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	b6 01       	movw	r22, r12
    13cc:	0c c0       	rjmp	.+24     	; 0x13e6 <vfprintf+0x36e>
    13ce:	8a 2d       	mov	r24, r10
    13d0:	86 78       	andi	r24, 0x86	; 134
    13d2:	59 f0       	breq	.+22     	; 0x13ea <vfprintf+0x372>
    13d4:	a1 fe       	sbrs	r10, 1
    13d6:	02 c0       	rjmp	.+4      	; 0x13dc <vfprintf+0x364>
    13d8:	8b e2       	ldi	r24, 0x2B	; 43
    13da:	01 c0       	rjmp	.+2      	; 0x13de <vfprintf+0x366>
    13dc:	80 e2       	ldi	r24, 0x20	; 32
    13de:	a7 fc       	sbrc	r10, 7
    13e0:	8d e2       	ldi	r24, 0x2D	; 45
    13e2:	b6 01       	movw	r22, r12
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	0e 94 33 0a 	call	0x1466	; 0x1466 <fputc>
    13ea:	89 14       	cp	r8, r9
    13ec:	38 f4       	brcc	.+14     	; 0x13fc <vfprintf+0x384>
    13ee:	b6 01       	movw	r22, r12
    13f0:	80 e3       	ldi	r24, 0x30	; 48
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	0e 94 33 0a 	call	0x1466	; 0x1466 <fputc>
    13f8:	9a 94       	dec	r9
    13fa:	f7 cf       	rjmp	.-18     	; 0x13ea <vfprintf+0x372>
    13fc:	8a 94       	dec	r8
    13fe:	f3 01       	movw	r30, r6
    1400:	e8 0d       	add	r30, r8
    1402:	f1 1d       	adc	r31, r1
    1404:	80 81       	ld	r24, Z
    1406:	b6 01       	movw	r22, r12
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	0e 94 33 0a 	call	0x1466	; 0x1466 <fputc>
    140e:	81 10       	cpse	r8, r1
    1410:	f5 cf       	rjmp	.-22     	; 0x13fc <vfprintf+0x384>
    1412:	22 20       	and	r2, r2
    1414:	09 f4       	brne	.+2      	; 0x1418 <vfprintf+0x3a0>
    1416:	42 ce       	rjmp	.-892    	; 0x109c <vfprintf+0x24>
    1418:	b6 01       	movw	r22, r12
    141a:	80 e2       	ldi	r24, 0x20	; 32
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	0e 94 33 0a 	call	0x1466	; 0x1466 <fputc>
    1422:	2a 94       	dec	r2
    1424:	f6 cf       	rjmp	.-20     	; 0x1412 <vfprintf+0x39a>
    1426:	f6 01       	movw	r30, r12
    1428:	86 81       	ldd	r24, Z+6	; 0x06
    142a:	97 81       	ldd	r25, Z+7	; 0x07
    142c:	02 c0       	rjmp	.+4      	; 0x1432 <vfprintf+0x3ba>
    142e:	8f ef       	ldi	r24, 0xFF	; 255
    1430:	9f ef       	ldi	r25, 0xFF	; 255
    1432:	2b 96       	adiw	r28, 0x0b	; 11
    1434:	e2 e1       	ldi	r30, 0x12	; 18
    1436:	0c 94 e9 0a 	jmp	0x15d2	; 0x15d2 <__epilogue_restores__>

0000143a <strnlen_P>:
    143a:	fc 01       	movw	r30, r24
    143c:	05 90       	lpm	r0, Z+
    143e:	61 50       	subi	r22, 0x01	; 1
    1440:	70 40       	sbci	r23, 0x00	; 0
    1442:	01 10       	cpse	r0, r1
    1444:	d8 f7       	brcc	.-10     	; 0x143c <strnlen_P+0x2>
    1446:	80 95       	com	r24
    1448:	90 95       	com	r25
    144a:	8e 0f       	add	r24, r30
    144c:	9f 1f       	adc	r25, r31
    144e:	08 95       	ret

00001450 <strnlen>:
    1450:	fc 01       	movw	r30, r24
    1452:	61 50       	subi	r22, 0x01	; 1
    1454:	70 40       	sbci	r23, 0x00	; 0
    1456:	01 90       	ld	r0, Z+
    1458:	01 10       	cpse	r0, r1
    145a:	d8 f7       	brcc	.-10     	; 0x1452 <strnlen+0x2>
    145c:	80 95       	com	r24
    145e:	90 95       	com	r25
    1460:	8e 0f       	add	r24, r30
    1462:	9f 1f       	adc	r25, r31
    1464:	08 95       	ret

00001466 <fputc>:
    1466:	0f 93       	push	r16
    1468:	1f 93       	push	r17
    146a:	cf 93       	push	r28
    146c:	df 93       	push	r29
    146e:	fb 01       	movw	r30, r22
    1470:	23 81       	ldd	r18, Z+3	; 0x03
    1472:	21 fd       	sbrc	r18, 1
    1474:	03 c0       	rjmp	.+6      	; 0x147c <fputc+0x16>
    1476:	8f ef       	ldi	r24, 0xFF	; 255
    1478:	9f ef       	ldi	r25, 0xFF	; 255
    147a:	2c c0       	rjmp	.+88     	; 0x14d4 <fputc+0x6e>
    147c:	22 ff       	sbrs	r18, 2
    147e:	16 c0       	rjmp	.+44     	; 0x14ac <fputc+0x46>
    1480:	46 81       	ldd	r20, Z+6	; 0x06
    1482:	57 81       	ldd	r21, Z+7	; 0x07
    1484:	24 81       	ldd	r18, Z+4	; 0x04
    1486:	35 81       	ldd	r19, Z+5	; 0x05
    1488:	42 17       	cp	r20, r18
    148a:	53 07       	cpc	r21, r19
    148c:	44 f4       	brge	.+16     	; 0x149e <fputc+0x38>
    148e:	a0 81       	ld	r26, Z
    1490:	b1 81       	ldd	r27, Z+1	; 0x01
    1492:	9d 01       	movw	r18, r26
    1494:	2f 5f       	subi	r18, 0xFF	; 255
    1496:	3f 4f       	sbci	r19, 0xFF	; 255
    1498:	31 83       	std	Z+1, r19	; 0x01
    149a:	20 83       	st	Z, r18
    149c:	8c 93       	st	X, r24
    149e:	26 81       	ldd	r18, Z+6	; 0x06
    14a0:	37 81       	ldd	r19, Z+7	; 0x07
    14a2:	2f 5f       	subi	r18, 0xFF	; 255
    14a4:	3f 4f       	sbci	r19, 0xFF	; 255
    14a6:	37 83       	std	Z+7, r19	; 0x07
    14a8:	26 83       	std	Z+6, r18	; 0x06
    14aa:	14 c0       	rjmp	.+40     	; 0x14d4 <fputc+0x6e>
    14ac:	8b 01       	movw	r16, r22
    14ae:	ec 01       	movw	r28, r24
    14b0:	fb 01       	movw	r30, r22
    14b2:	00 84       	ldd	r0, Z+8	; 0x08
    14b4:	f1 85       	ldd	r31, Z+9	; 0x09
    14b6:	e0 2d       	mov	r30, r0
    14b8:	09 95       	icall
    14ba:	89 2b       	or	r24, r25
    14bc:	e1 f6       	brne	.-72     	; 0x1476 <fputc+0x10>
    14be:	d8 01       	movw	r26, r16
    14c0:	16 96       	adiw	r26, 0x06	; 6
    14c2:	8d 91       	ld	r24, X+
    14c4:	9c 91       	ld	r25, X
    14c6:	17 97       	sbiw	r26, 0x07	; 7
    14c8:	01 96       	adiw	r24, 0x01	; 1
    14ca:	17 96       	adiw	r26, 0x07	; 7
    14cc:	9c 93       	st	X, r25
    14ce:	8e 93       	st	-X, r24
    14d0:	16 97       	sbiw	r26, 0x06	; 6
    14d2:	ce 01       	movw	r24, r28
    14d4:	df 91       	pop	r29
    14d6:	cf 91       	pop	r28
    14d8:	1f 91       	pop	r17
    14da:	0f 91       	pop	r16
    14dc:	08 95       	ret

000014de <__ultoa_invert>:
    14de:	fa 01       	movw	r30, r20
    14e0:	aa 27       	eor	r26, r26
    14e2:	28 30       	cpi	r18, 0x08	; 8
    14e4:	51 f1       	breq	.+84     	; 0x153a <__ultoa_invert+0x5c>
    14e6:	20 31       	cpi	r18, 0x10	; 16
    14e8:	81 f1       	breq	.+96     	; 0x154a <__ultoa_invert+0x6c>
    14ea:	e8 94       	clt
    14ec:	6f 93       	push	r22
    14ee:	6e 7f       	andi	r22, 0xFE	; 254
    14f0:	6e 5f       	subi	r22, 0xFE	; 254
    14f2:	7f 4f       	sbci	r23, 0xFF	; 255
    14f4:	8f 4f       	sbci	r24, 0xFF	; 255
    14f6:	9f 4f       	sbci	r25, 0xFF	; 255
    14f8:	af 4f       	sbci	r26, 0xFF	; 255
    14fa:	b1 e0       	ldi	r27, 0x01	; 1
    14fc:	3e d0       	rcall	.+124    	; 0x157a <__ultoa_invert+0x9c>
    14fe:	b4 e0       	ldi	r27, 0x04	; 4
    1500:	3c d0       	rcall	.+120    	; 0x157a <__ultoa_invert+0x9c>
    1502:	67 0f       	add	r22, r23
    1504:	78 1f       	adc	r23, r24
    1506:	89 1f       	adc	r24, r25
    1508:	9a 1f       	adc	r25, r26
    150a:	a1 1d       	adc	r26, r1
    150c:	68 0f       	add	r22, r24
    150e:	79 1f       	adc	r23, r25
    1510:	8a 1f       	adc	r24, r26
    1512:	91 1d       	adc	r25, r1
    1514:	a1 1d       	adc	r26, r1
    1516:	6a 0f       	add	r22, r26
    1518:	71 1d       	adc	r23, r1
    151a:	81 1d       	adc	r24, r1
    151c:	91 1d       	adc	r25, r1
    151e:	a1 1d       	adc	r26, r1
    1520:	20 d0       	rcall	.+64     	; 0x1562 <__ultoa_invert+0x84>
    1522:	09 f4       	brne	.+2      	; 0x1526 <__ultoa_invert+0x48>
    1524:	68 94       	set
    1526:	3f 91       	pop	r19
    1528:	2a e0       	ldi	r18, 0x0A	; 10
    152a:	26 9f       	mul	r18, r22
    152c:	11 24       	eor	r1, r1
    152e:	30 19       	sub	r19, r0
    1530:	30 5d       	subi	r19, 0xD0	; 208
    1532:	31 93       	st	Z+, r19
    1534:	de f6       	brtc	.-74     	; 0x14ec <__ultoa_invert+0xe>
    1536:	cf 01       	movw	r24, r30
    1538:	08 95       	ret
    153a:	46 2f       	mov	r20, r22
    153c:	47 70       	andi	r20, 0x07	; 7
    153e:	40 5d       	subi	r20, 0xD0	; 208
    1540:	41 93       	st	Z+, r20
    1542:	b3 e0       	ldi	r27, 0x03	; 3
    1544:	0f d0       	rcall	.+30     	; 0x1564 <__ultoa_invert+0x86>
    1546:	c9 f7       	brne	.-14     	; 0x153a <__ultoa_invert+0x5c>
    1548:	f6 cf       	rjmp	.-20     	; 0x1536 <__ultoa_invert+0x58>
    154a:	46 2f       	mov	r20, r22
    154c:	4f 70       	andi	r20, 0x0F	; 15
    154e:	40 5d       	subi	r20, 0xD0	; 208
    1550:	4a 33       	cpi	r20, 0x3A	; 58
    1552:	18 f0       	brcs	.+6      	; 0x155a <__ultoa_invert+0x7c>
    1554:	49 5d       	subi	r20, 0xD9	; 217
    1556:	31 fd       	sbrc	r19, 1
    1558:	40 52       	subi	r20, 0x20	; 32
    155a:	41 93       	st	Z+, r20
    155c:	02 d0       	rcall	.+4      	; 0x1562 <__ultoa_invert+0x84>
    155e:	a9 f7       	brne	.-22     	; 0x154a <__ultoa_invert+0x6c>
    1560:	ea cf       	rjmp	.-44     	; 0x1536 <__ultoa_invert+0x58>
    1562:	b4 e0       	ldi	r27, 0x04	; 4
    1564:	a6 95       	lsr	r26
    1566:	97 95       	ror	r25
    1568:	87 95       	ror	r24
    156a:	77 95       	ror	r23
    156c:	67 95       	ror	r22
    156e:	ba 95       	dec	r27
    1570:	c9 f7       	brne	.-14     	; 0x1564 <__ultoa_invert+0x86>
    1572:	00 97       	sbiw	r24, 0x00	; 0
    1574:	61 05       	cpc	r22, r1
    1576:	71 05       	cpc	r23, r1
    1578:	08 95       	ret
    157a:	9b 01       	movw	r18, r22
    157c:	ac 01       	movw	r20, r24
    157e:	0a 2e       	mov	r0, r26
    1580:	06 94       	lsr	r0
    1582:	57 95       	ror	r21
    1584:	47 95       	ror	r20
    1586:	37 95       	ror	r19
    1588:	27 95       	ror	r18
    158a:	ba 95       	dec	r27
    158c:	c9 f7       	brne	.-14     	; 0x1580 <__ultoa_invert+0xa2>
    158e:	62 0f       	add	r22, r18
    1590:	73 1f       	adc	r23, r19
    1592:	84 1f       	adc	r24, r20
    1594:	95 1f       	adc	r25, r21
    1596:	a0 1d       	adc	r26, r0
    1598:	08 95       	ret

0000159a <__prologue_saves__>:
    159a:	2f 92       	push	r2
    159c:	3f 92       	push	r3
    159e:	4f 92       	push	r4
    15a0:	5f 92       	push	r5
    15a2:	6f 92       	push	r6
    15a4:	7f 92       	push	r7
    15a6:	8f 92       	push	r8
    15a8:	9f 92       	push	r9
    15aa:	af 92       	push	r10
    15ac:	bf 92       	push	r11
    15ae:	cf 92       	push	r12
    15b0:	df 92       	push	r13
    15b2:	ef 92       	push	r14
    15b4:	ff 92       	push	r15
    15b6:	0f 93       	push	r16
    15b8:	1f 93       	push	r17
    15ba:	cf 93       	push	r28
    15bc:	df 93       	push	r29
    15be:	cd b7       	in	r28, 0x3d	; 61
    15c0:	de b7       	in	r29, 0x3e	; 62
    15c2:	ca 1b       	sub	r28, r26
    15c4:	db 0b       	sbc	r29, r27
    15c6:	0f b6       	in	r0, 0x3f	; 63
    15c8:	f8 94       	cli
    15ca:	de bf       	out	0x3e, r29	; 62
    15cc:	0f be       	out	0x3f, r0	; 63
    15ce:	cd bf       	out	0x3d, r28	; 61
    15d0:	09 94       	ijmp

000015d2 <__epilogue_restores__>:
    15d2:	2a 88       	ldd	r2, Y+18	; 0x12
    15d4:	39 88       	ldd	r3, Y+17	; 0x11
    15d6:	48 88       	ldd	r4, Y+16	; 0x10
    15d8:	5f 84       	ldd	r5, Y+15	; 0x0f
    15da:	6e 84       	ldd	r6, Y+14	; 0x0e
    15dc:	7d 84       	ldd	r7, Y+13	; 0x0d
    15de:	8c 84       	ldd	r8, Y+12	; 0x0c
    15e0:	9b 84       	ldd	r9, Y+11	; 0x0b
    15e2:	aa 84       	ldd	r10, Y+10	; 0x0a
    15e4:	b9 84       	ldd	r11, Y+9	; 0x09
    15e6:	c8 84       	ldd	r12, Y+8	; 0x08
    15e8:	df 80       	ldd	r13, Y+7	; 0x07
    15ea:	ee 80       	ldd	r14, Y+6	; 0x06
    15ec:	fd 80       	ldd	r15, Y+5	; 0x05
    15ee:	0c 81       	ldd	r16, Y+4	; 0x04
    15f0:	1b 81       	ldd	r17, Y+3	; 0x03
    15f2:	aa 81       	ldd	r26, Y+2	; 0x02
    15f4:	b9 81       	ldd	r27, Y+1	; 0x01
    15f6:	ce 0f       	add	r28, r30
    15f8:	d1 1d       	adc	r29, r1
    15fa:	0f b6       	in	r0, 0x3f	; 63
    15fc:	f8 94       	cli
    15fe:	de bf       	out	0x3e, r29	; 62
    1600:	0f be       	out	0x3f, r0	; 63
    1602:	cd bf       	out	0x3d, r28	; 61
    1604:	ed 01       	movw	r28, r26
    1606:	08 95       	ret

00001608 <_exit>:
    1608:	f8 94       	cli

0000160a <__stop_program>:
    160a:	ff cf       	rjmp	.-2      	; 0x160a <__stop_program>
